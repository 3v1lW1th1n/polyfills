{"version":3,"file":"apply-shim.min.js","sources":["../src/style-settings.js","../src/css-parse.js","../src/common-regex.js","../src/style-util.js","../src/apply-shim.js","../src/template-map.js","../src/apply-shim-utils.js","../src/common-utils.js","apply-shim.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nexport let nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n/**\n * @param {?Object} settings\n */\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings['shimcssproperties'];\n    nativeShadow = nativeShadow && !settings['shimshadow'];\n  }\n}\n\nif (window['ShadyCSS']) {\n  parseSettings(window['ShadyCSS']);\n} else if (window['WebComponents']) {\n  parseSettings(window['WebComponents']['flags']);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media[^(]*(\\([^)]*\\))/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport {parse, stringify, types, StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n */\nexport function toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'];\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\n/**\n * @param {Node} style\n * @param {?Node} target\n * @param {?Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return /** @type {HTMLStyleElement} */(target.insertBefore(style, after));\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {Element}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/** @type {Node} */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {Node}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * @param {Element} element\n * @return {?string}\n */\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window['ShadyDOM']) {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\n/**\n * @param {Element|Object} element\n * @return {{is: string, extends: string}}\n */\nexport function getIsExtends(element) {\n  let is = element.is || (element.getAttribute && element.getAttribute('is')) || element.localName;\n  let extendz = element.extends || element.localName !== is ? element.localName : '';\n  return {is, extends: extendz};\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText} from './style-util'\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex'\nimport {StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nclass ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n    // reset state of the regexes\n    MIXIN_MATCH.lastIndex = 0;\n    VAR_ASSIGN.lastIndex = 0;\n    return has;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    const style = /** @type {HTMLStyleElement} */(template.content.querySelector('style'));\n    /** @type {StyleNode} */\n    let ast = null;\n    if (style) {\n      ast = this.transformStyle(style, elementName);\n    }\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    })\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText']);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @return {string}\n   */\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>\n      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin));\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @return {string}\n   */\n  _consumeCssProperties(text) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @return {string}\n   */\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  }\n});\n\nexport default ApplyShim;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map'\nimport {StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  template['_applyShimInvalid'] = true;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return !template['_applyShimInvalid'];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return template._validating;\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      template['_applyShimInvalid'] = false;\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  return window.getComputedStyle(element).getPropertyValue(property).trim();\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ApplyShim from '../src/apply-shim'\nimport templateMap from '../src/template-map'\nimport {getIsExtends} from '../src/style-util'\nimport * as ApplyShimUtils from '../src/apply-shim-utils'\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils'\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    this.customStyleInterface = null;\n    this.booted = false;\n  }\n  ensure() {\n    if (this.booted) {\n      return;\n    }\n    this.customStyleInterface = window['ShadyCSS']['CustomStyleInterface'];\n    if (this.customStyleInterface) {\n      this.customStyleInterface['transformCallback'] = (style) => {\n        applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        this.flushCustomStyles();\n        if (ApplyShimUtils.elementsAreInvalid()) {\n          this.styleDocument();\n        }\n      }\n    }\n    this.booted = true;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    templateMap[elementName] = template;\n    applyShim.transformTemplate(template, elementName);\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (this.customStyleInterface) {\n      this.customStyleInterface['findStyles']();\n      let styles = this.customStyleInterface['customStyles'];\n      for (let i = 0; i < styles.length; i++ ) {\n        let cs = styles[i];\n        let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n        if (style) {\n          applyShim.transformCustomStyle(style);\n        }\n      }\n      this.customStyleInterface['enqueued'] = false;\n    }\n  }\n  /**\n   * @param {Element} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren = element.shadowRoot.children || element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(shadowChildren[i]);\n      }\n    }\n    let children = element.children || element.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      this.styleSubtree(children[i]);\n    }\n  }\n  /**\n   * @param {Element} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update all instances\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          applyShim.transformStyle(style, is);\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.documentElement, properties);\n  }\n}\n\nconst applyShimInterface = new ApplyShimInterface();\n\nif (!window['ShadyCSS'] || !window['ShadyCSS']['ScopingShim']) {\n  let CustomStyleInterface = window['ShadyCSS'] && window['ShadyCSS']['CustomStyleInterface'];\n\n  window['ShadyCSS'] = {\n    /**\n     * @param {HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    ['prepareTemplate'](template, elementName, elementExtends) { // eslint-disable-line no-unused-vars\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName)\n    },\n\n    /**\n     * @param {Element} element\n     * @param {Object=} properties\n     */\n    ['styleSubtree'](element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {Element} element\n     */\n    ['styleElement'](element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    ['styleDocument'](properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    ['getComputedStyleValue'](element, property) {\n      return getComputedStyleValue(element, property);\n    },\n    ['nativeCss']: true,\n    ['nativeShadow']: true\n  };\n\n  if (CustomStyleInterface) {\n    window['ShadyCSS']['CustomStyleInterface'] = CustomStyleInterface;\n  }\n}\n\nwindow['ShadyCSS']['ApplyShim'] = applyShim;"],"names":["ApplyShimUtils.elementsAreInvalid","ApplyShimUtils.templateIsValid","ApplyShimUtils.templateIsValidating","ApplyShimUtils.startValidatingTemplate"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9kZnJlZWRtL3BvbHltZXIvY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvc3R5bGUtc2V0dGluZ3MuanMiLCIvVXNlcnMvZGZyZWVkbS9wb2x5bWVyL2NvbXBvbmVudHMvc2hhZHljc3Mvc3JjL2Nzcy1wYXJzZS5qcyIsIi9Vc2Vycy9kZnJlZWRtL3BvbHltZXIvY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvY29tbW9uLXJlZ2V4LmpzIiwiL1VzZXJzL2RmcmVlZG0vcG9seW1lci9jb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9zdHlsZS11dGlsLmpzIiwiL1VzZXJzL2RmcmVlZG0vcG9seW1lci9jb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9hcHBseS1zaGltLmpzIiwiL1VzZXJzL2RmcmVlZG0vcG9seW1lci9jb21wb25lbnRzL3NoYWR5Y3NzL3NyYy90ZW1wbGF0ZS1tYXAuanMiLCIvVXNlcnMvZGZyZWVkbS9wb2x5bWVyL2NvbXBvbmVudHMvc2hhZHljc3Mvc3JjL2FwcGx5LXNoaW0tdXRpbHMuanMiLCIvVXNlcnMvZGZyZWVkbS9wb2x5bWVyL2NvbXBvbmVudHMvc2hhZHljc3Mvc3JjL2NvbW1vbi11dGlscy5qcyIsIi9Vc2Vycy9kZnJlZWRtL3BvbHltZXIvY29tcG9uZW50cy9zaGFkeWNzcy9lbnRyeXBvaW50cy9hcHBseS1zaGltLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGxldCBuYXRpdmVTaGFkb3cgPSAhKHdpbmRvd1snU2hhZHlET00nXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ2luVXNlJ10pO1xuLy8gY2hyb21lIDQ5IGhhcyBzZW1pLXdvcmtpbmcgY3NzIHZhcnMsIGNoZWNrIGlmIGJveC1zaGFkb3cgd29ya3Ncbi8vIHNhZmFyaSA5LjEgaGFzIGEgcmVjYWxjIGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NTc4MlxuZXhwb3J0IGxldCBuYXRpdmVDc3NWYXJpYWJsZXMgPSAoIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goJ0FwcGxlV2ViS2l0LzYwMScpICYmXG53aW5kb3cuQ1NTICYmIENTUy5zdXBwb3J0cyAmJiBDU1Muc3VwcG9ydHMoJ2JveC1zaGFkb3cnLCAnMCAwIDAgdmFyKC0tZm9vKScpKTtcblxuLyoqXG4gKiBAcGFyYW0gez9PYmplY3R9IHNldHRpbmdzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgaWYgKHNldHRpbmdzKSB7XG4gICAgbmF0aXZlQ3NzVmFyaWFibGVzID0gbmF0aXZlQ3NzVmFyaWFibGVzICYmICFzZXR0aW5nc1snc2hpbWNzc3Byb3BlcnRpZXMnXTtcbiAgICBuYXRpdmVTaGFkb3cgPSBuYXRpdmVTaGFkb3cgJiYgIXNldHRpbmdzWydzaGltc2hhZG93J107XG4gIH1cbn1cblxuaWYgKHdpbmRvd1snU2hhZHlDU1MnXSkge1xuICBwYXJzZVNldHRpbmdzKHdpbmRvd1snU2hhZHlDU1MnXSk7XG59IGVsc2UgaWYgKHdpbmRvd1snV2ViQ29tcG9uZW50cyddKSB7XG4gIHBhcnNlU2V0dGluZ3Mod2luZG93WydXZWJDb21wb25lbnRzJ11bJ2ZsYWdzJ10pO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLypcbkV4dHJlbWVseSBzaW1wbGUgY3NzIHBhcnNlci4gSW50ZW5kZWQgdG8gYmUgbm90IG1vcmUgdGhhbiB3aGF0IHdlIG5lZWRcbmFuZCBkZWZpbml0ZWx5IG5vdCBuZWNlc3NhcmlseSBjb3JyZWN0ID0pLlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHVucmVzdHJpY3RlZCAqL1xuY2xhc3MgU3R5bGVOb2RlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snc3RhcnQnXSA9IDA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snZW5kJ10gPSAwO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3ByZXZpb3VzJ10gPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3BhcmVudCddID0gbnVsbDtcbiAgICAvKiogQHR5cGUge0FycmF5PFN0eWxlTm9kZT59ICovXG4gICAgdGhpc1sncnVsZXMnXSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkQ3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1snY3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXNbJ2F0UnVsZSddID0gZmFsc2U7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1sndHlwZSddID0gMDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydrZXlmcmFtZXNOYW1lJ10gPSAnJztcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydzZWxlY3RvciddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkU2VsZWN0b3InXSA9ICcnO1xuICB9XG59XG5cbmV4cG9ydCB7U3R5bGVOb2RlfVxuXG4vLyBnaXZlbiBhIHN0cmluZyBvZiBjc3MsIHJldHVybiBhIHNpbXBsZSBydWxlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHRleHQpIHtcbiAgdGV4dCA9IGNsZWFuKHRleHQpO1xuICByZXR1cm4gcGFyc2VDc3MobGV4KHRleHQpLCB0ZXh0KTtcbn1cblxuLy8gcmVtb3ZlIHN0dWZmIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhhdCBtYXkgaGluZGVyIHBhcnNpbmdcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2xlYW4oY3NzVGV4dCkge1xuICByZXR1cm4gY3NzVGV4dC5yZXBsYWNlKFJYLmNvbW1lbnRzLCAnJykucmVwbGFjZShSWC5wb3J0LCAnJyk7XG59XG5cbi8vIHN1cGVyIHNpbXBsZSB7Li4ufSBsZXhlciB0aGF0IHJldHVybnMgYSBub2RlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAqL1xuZnVuY3Rpb24gbGV4KHRleHQpIHtcbiAgbGV0IHJvb3QgPSBuZXcgU3R5bGVOb2RlKCk7XG4gIHJvb3RbJ3N0YXJ0J10gPSAwO1xuICByb290WydlbmQnXSA9IHRleHQubGVuZ3RoXG4gIGxldCBuID0gcm9vdDtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0ZXh0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh0ZXh0W2ldID09PSBPUEVOX0JSQUNFKSB7XG4gICAgICBpZiAoIW5bJ3J1bGVzJ10pIHtcbiAgICAgICAgblsncnVsZXMnXSA9IFtdO1xuICAgICAgfVxuICAgICAgbGV0IHAgPSBuO1xuICAgICAgbGV0IHByZXZpb3VzID0gcFsncnVsZXMnXVtwWydydWxlcyddLmxlbmd0aCAtIDFdIHx8IG51bGw7XG4gICAgICBuID0gbmV3IFN0eWxlTm9kZSgpO1xuICAgICAgblsnc3RhcnQnXSA9IGkgKyAxO1xuICAgICAgblsncGFyZW50J10gPSBwO1xuICAgICAgblsncHJldmlvdXMnXSA9IHByZXZpb3VzO1xuICAgICAgcFsncnVsZXMnXS5wdXNoKG4pO1xuICAgIH0gZWxzZSBpZiAodGV4dFtpXSA9PT0gQ0xPU0VfQlJBQ0UpIHtcbiAgICAgIG5bJ2VuZCddID0gaSArIDE7XG4gICAgICBuID0gblsncGFyZW50J10gfHwgcm9vdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJvb3Q7XG59XG5cbi8vIGFkZCBzZWxlY3RvcnMvY3NzVGV4dCB0byBub2RlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJuIHtTdHlsZU5vZGV9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ3NzKG5vZGUsIHRleHQpIHtcbiAgbGV0IHQgPSB0ZXh0LnN1YnN0cmluZyhub2RlWydzdGFydCddLCBub2RlWydlbmQnXSAtIDEpO1xuICBub2RlWydwYXJzZWRDc3NUZXh0J10gPSBub2RlWydjc3NUZXh0J10gPSB0LnRyaW0oKTtcbiAgaWYgKG5vZGVbJ3BhcmVudCddKSB7XG4gICAgbGV0IHNzID0gbm9kZVsncHJldmlvdXMnXSA/IG5vZGVbJ3ByZXZpb3VzJ11bJ2VuZCddIDogbm9kZVsncGFyZW50J11bJ3N0YXJ0J107XG4gICAgdCA9IHRleHQuc3Vic3RyaW5nKHNzLCBub2RlWydzdGFydCddIC0gMSk7XG4gICAgdCA9IF9leHBhbmRVbmljb2RlRXNjYXBlcyh0KTtcbiAgICB0ID0gdC5yZXBsYWNlKFJYLm11bHRpcGxlU3BhY2VzLCAnICcpO1xuICAgIC8vIFRPRE8oc29ydmVsbCk6IGFkIGhvYzsgbWFrZSBzZWxlY3RvciBpbmNsdWRlIG9ubHkgYWZ0ZXIgbGFzdCA7XG4gICAgLy8gaGVscHMgd2l0aCBtaXhpbiBzeW50YXhcbiAgICB0ID0gdC5zdWJzdHJpbmcodC5sYXN0SW5kZXhPZignOycpICsgMSk7XG4gICAgbGV0IHMgPSBub2RlWydwYXJzZWRTZWxlY3RvciddID0gbm9kZVsnc2VsZWN0b3InXSA9IHQudHJpbSgpO1xuICAgIG5vZGVbJ2F0UnVsZSddID0gKHMuaW5kZXhPZihBVF9TVEFSVCkgPT09IDApO1xuICAgIC8vIG5vdGUsIHN1cHBvcnQgYSBzdWJzZXQgb2YgcnVsZSB0eXBlcy4uLlxuICAgIGlmIChub2RlWydhdFJ1bGUnXSkge1xuICAgICAgaWYgKHMuaW5kZXhPZihNRURJQV9TVEFSVCkgPT09IDApIHtcbiAgICAgICAgbm9kZVsndHlwZSddID0gdHlwZXMuTUVESUFfUlVMRTtcbiAgICAgIH0gZWxzZSBpZiAocy5tYXRjaChSWC5rZXlmcmFtZXNSdWxlKSkge1xuICAgICAgICBub2RlWyd0eXBlJ10gPSB0eXBlcy5LRVlGUkFNRVNfUlVMRTtcbiAgICAgICAgbm9kZVsna2V5ZnJhbWVzTmFtZSddID1cbiAgICAgICAgICBub2RlWydzZWxlY3RvciddLnNwbGl0KFJYLm11bHRpcGxlU3BhY2VzKS5wb3AoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHMuaW5kZXhPZihWQVJfU1RBUlQpID09PSAwKSB7XG4gICAgICAgIG5vZGVbJ3R5cGUnXSA9IHR5cGVzLk1JWElOX1JVTEU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlWyd0eXBlJ10gPSB0eXBlcy5TVFlMRV9SVUxFO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgciQgPSBub2RlWydydWxlcyddO1xuICBpZiAociQpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHIkLmxlbmd0aCwgcjtcbiAgICAgIChpIDwgbCkgJiYgKHIgPSByJFtpXSk7IGkrKykge1xuICAgICAgcGFyc2VDc3MociwgdGV4dCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIGNvbnZlcnNpb24gb2Ygc29ydCB1bmljb2RlIGVzY2FwZXMgd2l0aCBzcGFjZXMgbGlrZSBgXFwzMyBgIChhbmQgbG9uZ2VyKSBpbnRvXG4gKiBleHBhbmRlZCBmb3JtIHRoYXQgZG9lc24ndCByZXF1aXJlIHRyYWlsaW5nIHNwYWNlIGBcXDAwMDAzM2BcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIF9leHBhbmRVbmljb2RlRXNjYXBlcyhzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1xcXFwoWzAtOWEtZl17MSw2fSlcXHMvZ2ksIGZ1bmN0aW9uKCkge1xuICAgIGxldCBjb2RlID0gYXJndW1lbnRzWzFdLFxuICAgICAgcmVwZWF0ID0gNiAtIGNvZGUubGVuZ3RoO1xuICAgIHdoaWxlIChyZXBlYXQtLSkge1xuICAgICAgY29kZSA9ICcwJyArIGNvZGU7XG4gICAgfVxuICAgIHJldHVybiAnXFxcXCcgKyBjb2RlO1xuICB9KTtcbn1cblxuLyoqXG4gKiBzdHJpbmdpZnkgcGFyc2VkIGNzcy5cbiAqIEBwYXJhbSB7U3R5bGVOb2RlfSBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBwcmVzZXJ2ZVByb3BlcnRpZXNcbiAqIEBwYXJhbSB7c3RyaW5nPX0gdGV4dFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KG5vZGUsIHByZXNlcnZlUHJvcGVydGllcywgdGV4dCA9ICcnKSB7XG4gIC8vIGNhbGMgcnVsZSBjc3NUZXh0XG4gIGxldCBjc3NUZXh0ID0gJyc7XG4gIGlmIChub2RlWydjc3NUZXh0J10gfHwgbm9kZVsncnVsZXMnXSkge1xuICAgIGxldCByJCA9IG5vZGVbJ3J1bGVzJ107XG4gICAgaWYgKHIkICYmICFfaGFzTWl4aW5SdWxlcyhyJCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gciQubGVuZ3RoLCByO1xuICAgICAgICAoaSA8IGwpICYmIChyID0gciRbaV0pOyBpKyspIHtcbiAgICAgICAgY3NzVGV4dCA9IHN0cmluZ2lmeShyLCBwcmVzZXJ2ZVByb3BlcnRpZXMsIGNzc1RleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjc3NUZXh0ID0gcHJlc2VydmVQcm9wZXJ0aWVzID8gbm9kZVsnY3NzVGV4dCddIDpcbiAgICAgICAgcmVtb3ZlQ3VzdG9tUHJvcHMobm9kZVsnY3NzVGV4dCddKTtcbiAgICAgIGNzc1RleHQgPSBjc3NUZXh0LnRyaW0oKTtcbiAgICAgIGlmIChjc3NUZXh0KSB7XG4gICAgICAgIGNzc1RleHQgPSAnICAnICsgY3NzVGV4dCArICdcXG4nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBlbWl0IHJ1bGUgaWYgdGhlcmUgaXMgY3NzVGV4dFxuICBpZiAoY3NzVGV4dCkge1xuICAgIGlmIChub2RlWydzZWxlY3RvciddKSB7XG4gICAgICB0ZXh0ICs9IG5vZGVbJ3NlbGVjdG9yJ10gKyAnICcgKyBPUEVOX0JSQUNFICsgJ1xcbic7XG4gICAgfVxuICAgIHRleHQgKz0gY3NzVGV4dDtcbiAgICBpZiAobm9kZVsnc2VsZWN0b3InXSkge1xuICAgICAgdGV4dCArPSBDTE9TRV9CUkFDRSArICdcXG5cXG4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGV4dDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PFN0eWxlTm9kZT59IHJ1bGVzXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBfaGFzTWl4aW5SdWxlcyhydWxlcykge1xuICBsZXQgciA9IHJ1bGVzWzBdO1xuICByZXR1cm4gQm9vbGVhbihyKSAmJiBCb29sZWFuKHJbJ3NlbGVjdG9yJ10pICYmIHJbJ3NlbGVjdG9yJ10uaW5kZXhPZihWQVJfU1RBUlQpID09PSAwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUN1c3RvbVByb3BzKGNzc1RleHQpIHtcbiAgY3NzVGV4dCA9IHJlbW92ZUN1c3RvbVByb3BBc3NpZ25tZW50KGNzc1RleHQpO1xuICByZXR1cm4gcmVtb3ZlQ3VzdG9tUHJvcEFwcGx5KGNzc1RleHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDdXN0b21Qcm9wQXNzaWdubWVudChjc3NUZXh0KSB7XG4gIHJldHVybiBjc3NUZXh0XG4gICAgLnJlcGxhY2UoUlguY3VzdG9tUHJvcCwgJycpXG4gICAgLnJlcGxhY2UoUlgubWl4aW5Qcm9wLCAnJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ3VzdG9tUHJvcEFwcGx5KGNzc1RleHQpIHtcbiAgcmV0dXJuIGNzc1RleHRcbiAgICAucmVwbGFjZShSWC5taXhpbkFwcGx5LCAnJylcbiAgICAucmVwbGFjZShSWC52YXJBcHBseSwgJycpO1xufVxuXG4vKiogQGVudW0ge251bWJlcn0gKi9cbmV4cG9ydCBjb25zdCB0eXBlcyA9IHtcbiAgU1RZTEVfUlVMRTogMSxcbiAgS0VZRlJBTUVTX1JVTEU6IDcsXG4gIE1FRElBX1JVTEU6IDQsXG4gIE1JWElOX1JVTEU6IDEwMDBcbn1cblxuY29uc3QgT1BFTl9CUkFDRSA9ICd7JztcbmNvbnN0IENMT1NFX0JSQUNFID0gJ30nO1xuXG4vLyBoZWxwZXIgcmVnZXhwJ3NcbmNvbnN0IFJYID0ge1xuICBjb21tZW50czogL1xcL1xcKlteKl0qXFwqKyhbXi8qXVteKl0qXFwqKykqXFwvL2dpbSxcbiAgcG9ydDogL0BpbXBvcnRbXjtdKjsvZ2ltLFxuICBjdXN0b21Qcm9wOiAvKD86XlteO1xcLVxcc31dKyk/LS1bXjt7fV0qPzpbXnt9O10qPyg/Ols7XFxuXXwkKS9naW0sXG4gIG1peGluUHJvcDogLyg/Ol5bXjtcXC1cXHN9XSspPy0tW147e31dKj86W157fTtdKj97W159XSo/fSg/Ols7XFxuXXwkKT8vZ2ltLFxuICBtaXhpbkFwcGx5OiAvQGFwcGx5XFxzKlxcKD9bXik7XSpcXCk/XFxzKig/Ols7XFxuXXwkKT8vZ2ltLFxuICB2YXJBcHBseTogL1teOzpdKj86W147XSo/dmFyXFwoW147XSpcXCkoPzpbO1xcbl18JCk/L2dpbSxcbiAga2V5ZnJhbWVzUnVsZTogL15AW15cXHNdKmtleWZyYW1lcy8sXG4gIG11bHRpcGxlU3BhY2VzOiAvXFxzKy9nXG59XG5cbmNvbnN0IFZBUl9TVEFSVCA9ICctLSc7XG5jb25zdCBNRURJQV9TVEFSVCA9ICdAbWVkaWEnO1xuY29uc3QgQVRfU1RBUlQgPSAnQCc7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5leHBvcnQgY29uc3QgVkFSX0FTU0lHTiA9IC8oPzpefFs7XFxze11cXHMqKSgtLVtcXHctXSo/KVxccyo6XFxzKig/OihbXjt7XSopfHsoW159XSopfSkoPzooPz1bO1xcc31dKXwkKS9naTtcbmV4cG9ydCBjb25zdCBNSVhJTl9NQVRDSCA9IC8oPzpefFxcVyspQGFwcGx5XFxzKlxcKD8oW14pO1xcbl0qKVxcKT8vZ2k7XG5leHBvcnQgY29uc3QgVkFSX0NPTlNVTUVEID0gLygtLVtcXHctXSspXFxzKihbOiw7KV18JCkvZ2k7XG5leHBvcnQgY29uc3QgQU5JTUFUSU9OX01BVENIID0gLyhhbmltYXRpb25cXHMqOil8KGFuaW1hdGlvbi1uYW1lXFxzKjopLztcbmV4cG9ydCBjb25zdCBNRURJQV9NQVRDSCA9IC9AbWVkaWFbXihdKihcXChbXildKlxcKSkvO1xuZXhwb3J0IGNvbnN0IElTX1ZBUiA9IC9eLS0vO1xuZXhwb3J0IGNvbnN0IEJSQUNLRVRFRCA9IC9cXHtbXn1dKlxcfS9nO1xuZXhwb3J0IGNvbnN0IEhPU1RfUFJFRklYID0gJyg/Ol58W14uI1s6XSknO1xuZXhwb3J0IGNvbnN0IEhPU1RfU1VGRklYID0gJygkfFsuOltcXFxccz4rfl0pJzsiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7bmF0aXZlU2hhZG93LCBuYXRpdmVDc3NWYXJpYWJsZXN9IGZyb20gJy4vc3R5bGUtc2V0dGluZ3MnXG5pbXBvcnQge3BhcnNlLCBzdHJpbmdpZnksIHR5cGVzLCBTdHlsZU5vZGV9IGZyb20gJy4vY3NzLXBhcnNlJyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQge01FRElBX01BVENIfSBmcm9tICcuL2NvbW1vbi1yZWdleCc7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8U3R5bGVOb2RlfSBydWxlc1xuICogQHBhcmFtIHtmdW5jdGlvbihTdHlsZU5vZGUpPX0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ3NzVGV4dCAocnVsZXMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgcnVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgcnVsZXMgPSBwYXJzZShydWxlcyk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZm9yRWFjaFJ1bGUocnVsZXMsIGNhbGxiYWNrKTtcbiAgfVxuICByZXR1cm4gc3RyaW5naWZ5KHJ1bGVzLCBuYXRpdmVDc3NWYXJpYWJsZXMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTFN0eWxlRWxlbWVudH0gc3R5bGVcbiAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRm9yU3R5bGUoc3R5bGUpIHtcbiAgaWYgKCFzdHlsZVsnX19jc3NSdWxlcyddICYmIHN0eWxlLnRleHRDb250ZW50KSB7XG4gICAgc3R5bGVbJ19fY3NzUnVsZXMnXSA9IHBhcnNlKHN0eWxlLnRleHRDb250ZW50KTtcbiAgfVxuICByZXR1cm4gc3R5bGVbJ19fY3NzUnVsZXMnXTtcbn1cblxuLy8gVGVzdHMgaWYgYSBydWxlIGlzIGEga2V5ZnJhbWVzIHNlbGVjdG9yLCB3aGljaCBsb29rcyBhbG1vc3QgZXhhY3RseVxuLy8gbGlrZSBhIG5vcm1hbCBzZWxlY3RvciBidXQgaXMgbm90IChpdCBoYXMgbm90aGluZyB0byBkbyB3aXRoIHNjb3Bpbmdcbi8vIGZvciBleGFtcGxlKS5cbi8qKlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0tleWZyYW1lc1NlbGVjdG9yKHJ1bGUpIHtcbiAgcmV0dXJuIEJvb2xlYW4ocnVsZVsncGFyZW50J10pICYmXG4gIHJ1bGVbJ3BhcmVudCddWyd0eXBlJ10gPT09IHR5cGVzLktFWUZSQU1FU19SVUxFO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3R5bGVOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gc3R5bGVSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBrZXlmcmFtZXNSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9ubHlBY3RpdmVSdWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFJ1bGUobm9kZSwgc3R5bGVSdWxlQ2FsbGJhY2ssIGtleWZyYW1lc1J1bGVDYWxsYmFjaywgb25seUFjdGl2ZVJ1bGVzKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2tpcFJ1bGVzID0gZmFsc2U7XG4gIGxldCB0eXBlID0gbm9kZVsndHlwZSddO1xuICBpZiAob25seUFjdGl2ZVJ1bGVzKSB7XG4gICAgaWYgKHR5cGUgPT09IHR5cGVzLk1FRElBX1JVTEUpIHtcbiAgICAgIGxldCBtYXRjaE1lZGlhID0gbm9kZVsnc2VsZWN0b3InXS5tYXRjaChNRURJQV9NQVRDSCk7XG4gICAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgICAvLyBpZiBydWxlIGlzIGEgbm9uIG1hdGNoaW5nIEBtZWRpYSBydWxlLCBza2lwIHN1YnJ1bGVzXG4gICAgICAgIGlmICghd2luZG93Lm1hdGNoTWVkaWEobWF0Y2hNZWRpYVsxXSkubWF0Y2hlcykge1xuICAgICAgICAgIHNraXBSdWxlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHR5cGUgPT09IHR5cGVzLlNUWUxFX1JVTEUpIHtcbiAgICBzdHlsZVJ1bGVDYWxsYmFjayhub2RlKTtcbiAgfSBlbHNlIGlmIChrZXlmcmFtZXNSdWxlQ2FsbGJhY2sgJiZcbiAgICB0eXBlID09PSB0eXBlcy5LRVlGUkFNRVNfUlVMRSkge1xuICAgIGtleWZyYW1lc1J1bGVDYWxsYmFjayhub2RlKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSB0eXBlcy5NSVhJTl9SVUxFKSB7XG4gICAgc2tpcFJ1bGVzID0gdHJ1ZTtcbiAgfVxuICBsZXQgciQgPSBub2RlWydydWxlcyddO1xuICBpZiAociQgJiYgIXNraXBSdWxlcykge1xuICAgIGZvciAobGV0IGk9MCwgbD1yJC5sZW5ndGgsIHI7IChpPGwpICYmIChyPXIkW2ldKTsgaSsrKSB7XG4gICAgICBmb3JFYWNoUnVsZShyLCBzdHlsZVJ1bGVDYWxsYmFjaywga2V5ZnJhbWVzUnVsZUNhbGxiYWNrLCBvbmx5QWN0aXZlUnVsZXMpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBhZGQgYSBzdHJpbmcgb2YgY3NzVGV4dCB0byB0aGUgZG9jdW1lbnQuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gbW9uaWtlclxuICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZX0gY29udGV4dE5vZGVcbiAqIEByZXR1cm4ge0hUTUxTdHlsZUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNzcyhjc3NUZXh0LCBtb25pa2VyLCB0YXJnZXQsIGNvbnRleHROb2RlKSB7XG4gIGxldCBzdHlsZSA9IGNyZWF0ZVNjb3BlU3R5bGUoY3NzVGV4dCwgbW9uaWtlcik7XG4gIHJldHVybiBhcHBseVN0eWxlKHN0eWxlLCB0YXJnZXQsIGNvbnRleHROb2RlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IHN0eWxlXG4gKiBAcGFyYW0gez9Ob2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7P05vZGV9IGNvbnRleHROb2RlXG4gKiBAcmV0dXJuIHtIVE1MU3R5bGVFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZShzdHlsZSwgdGFyZ2V0LCBjb250ZXh0Tm9kZSkge1xuICB0YXJnZXQgPSB0YXJnZXQgfHwgZG9jdW1lbnQuaGVhZDtcbiAgbGV0IGFmdGVyID0gKGNvbnRleHROb2RlICYmIGNvbnRleHROb2RlLm5leHRTaWJsaW5nKSB8fFxuICB0YXJnZXQuZmlyc3RDaGlsZDtcbiAgbGFzdEhlYWRBcHBseU5vZGUgPSBzdHlsZTtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7SFRNTFN0eWxlRWxlbWVudH0gKi8odGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgYWZ0ZXIpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IG1vbmlrZXJcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTY29wZVN0eWxlKGNzc1RleHQsIG1vbmlrZXIpIHtcbiAgbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgaWYgKG1vbmlrZXIpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ3Njb3BlJywgbW9uaWtlcik7XG4gIH1cbiAgc3R5bGUudGV4dENvbnRlbnQgPSBjc3NUZXh0O1xuICByZXR1cm4gc3R5bGU7XG59XG5cbi8qKiBAdHlwZSB7Tm9kZX0gKi9cbmxldCBsYXN0SGVhZEFwcGx5Tm9kZSA9IG51bGw7XG5cbi8vIGluc2VydCBhIGNvbW1lbnQgbm9kZSBhcyBhIHN0eWxpbmcgcG9zaXRpb24gcGxhY2Vob2xkZXIuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb25pa2VyXG4gKiBAcmV0dXJuIHtOb2RlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZVBsYWNlSG9sZGVyKG1vbmlrZXIpIHtcbiAgbGV0IHBsYWNlSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIFNoYWR5IERPTSBzdHlsZXMgZm9yICcgK1xuICAgIG1vbmlrZXIgKyAnICcpO1xuICBsZXQgYWZ0ZXIgPSBsYXN0SGVhZEFwcGx5Tm9kZSA/XG4gICAgbGFzdEhlYWRBcHBseU5vZGVbJ25leHRTaWJsaW5nJ10gOiBudWxsO1xuICBsZXQgc2NvcGUgPSBkb2N1bWVudC5oZWFkO1xuICBzY29wZS5pbnNlcnRCZWZvcmUocGxhY2VIb2xkZXIsIGFmdGVyIHx8IHNjb3BlLmZpcnN0Q2hpbGQpO1xuICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHBsYWNlSG9sZGVyO1xuICByZXR1cm4gcGxhY2VIb2xkZXI7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1aWxkVHlwZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGFyZ2V0ZWRCdWlsZChidWlsZFR5cGUpIHtcbiAgcmV0dXJuIG5hdGl2ZVNoYWRvdyA/IGJ1aWxkVHlwZSA9PT0gJ3NoYWRvdycgOiBidWlsZFR5cGUgPT09ICdzaGFkeSc7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3NzQnVpbGRUeXBlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjc3MtYnVpbGQnKTtcbn1cblxuLyoqXG4gKiBXYWxrIGZyb20gdGV4dFtzdGFydF0gbWF0Y2hpbmcgcGFyZW5zIGFuZFxuICogcmV0dXJucyBwb3NpdGlvbiBvZiB0aGUgb3V0ZXIgZW5kIHBhcmVuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGZpbmRNYXRjaGluZ1BhcmVuKHRleHQsIHN0YXJ0KSB7XG4gIGxldCBsZXZlbCA9IDA7XG4gIGZvciAobGV0IGk9c3RhcnQsIGw9dGV4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAodGV4dFtpXSA9PT0gJygnKSB7XG4gICAgICBsZXZlbCsrO1xuICAgIH0gZWxzZSBpZiAodGV4dFtpXSA9PT0gJyknKSB7XG4gICAgICBpZiAoLS1sZXZlbCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nKX0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrKHN0ciwgY2FsbGJhY2spIHtcbiAgLy8gZmluZCAndmFyKCdcbiAgbGV0IHN0YXJ0ID0gc3RyLmluZGV4T2YoJ3ZhcignKTtcbiAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgIC8vIG5vIHZhcj8sIGV2ZXJ5dGhpbmcgaXMgcHJlZml4XG4gICAgcmV0dXJuIGNhbGxiYWNrKHN0ciwgJycsICcnLCAnJyk7XG4gIH1cbiAgLy8ke3ByZWZpeH12YXIoJHtpbm5lcn0pJHtzdWZmaXh9XG4gIGxldCBlbmQgPSBmaW5kTWF0Y2hpbmdQYXJlbihzdHIsIHN0YXJ0ICsgMyk7XG4gIGxldCBpbm5lciA9IHN0ci5zdWJzdHJpbmcoc3RhcnQgKyA0LCBlbmQpO1xuICBsZXQgcHJlZml4ID0gc3RyLnN1YnN0cmluZygwLCBzdGFydCk7XG4gIC8vIHN1ZmZpeCBtYXkgaGF2ZSBvdGhlciB2YXJpYWJsZXNcbiAgbGV0IHN1ZmZpeCA9IHByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrKHN0ci5zdWJzdHJpbmcoZW5kICsgMSksIGNhbGxiYWNrKTtcbiAgbGV0IGNvbW1hID0gaW5uZXIuaW5kZXhPZignLCcpO1xuICAvLyB2YWx1ZSBhbmQgZmFsbGJhY2sgYXJncyBzaG91bGQgYmUgdHJpbW1lZCB0byBtYXRjaCBpbiBwcm9wZXJ0eSBsb29rdXBcbiAgaWYgKGNvbW1hID09PSAtMSkge1xuICAgIC8vIHZhcmlhYmxlLCBubyBmYWxsYmFja1xuICAgIHJldHVybiBjYWxsYmFjayhwcmVmaXgsIGlubmVyLnRyaW0oKSwgJycsIHN1ZmZpeCk7XG4gIH1cbiAgLy8gdmFyKCR7dmFsdWV9LCR7ZmFsbGJhY2t9KVxuICBsZXQgdmFsdWUgPSBpbm5lci5zdWJzdHJpbmcoMCwgY29tbWEpLnRyaW0oKTtcbiAgbGV0IGZhbGxiYWNrID0gaW5uZXIuc3Vic3RyaW5nKGNvbW1hICsgMSkudHJpbSgpO1xuICByZXR1cm4gY2FsbGJhY2socHJlZml4LCB2YWx1ZSwgZmFsbGJhY2ssIHN1ZmZpeCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVsZW1lbnRDbGFzc1JhdyhlbGVtZW50LCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIHNldEF0dHJpYnV0ZSBwcm92aWRlZCBieSBTaGFkeURPTSB3aGVuIHNldEF0dHJpYnV0ZSBpcyBwYXRjaGVkXG4gIGlmICh3aW5kb3dbJ1NoYWR5RE9NJ10pIHtcbiAgICB3aW5kb3dbJ1NoYWR5RE9NJ11bJ25hdGl2ZU1ldGhvZHMnXVsnc2V0QXR0cmlidXRlJ10uY2FsbChlbGVtZW50LCAnY2xhc3MnLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbWVudFxuICogQHJldHVybiB7e2lzOiBzdHJpbmcsIGV4dGVuZHM6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJc0V4dGVuZHMoZWxlbWVudCkge1xuICBsZXQgaXMgPSBlbGVtZW50LmlzIHx8IChlbGVtZW50LmdldEF0dHJpYnV0ZSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaXMnKSkgfHwgZWxlbWVudC5sb2NhbE5hbWU7XG4gIGxldCBleHRlbmR6ID0gZWxlbWVudC5leHRlbmRzIHx8IGVsZW1lbnQubG9jYWxOYW1lICE9PSBpcyA/IGVsZW1lbnQubG9jYWxOYW1lIDogJyc7XG4gIHJldHVybiB7aXMsIGV4dGVuZHM6IGV4dGVuZHp9O1xufSIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG4vKlxuICogVGhlIGFwcGx5IHNoaW0gc2ltdWxhdGVzIHRoZSBiZWhhdmlvciBvZiBgQGFwcGx5YCBwcm9wb3NlZCBhdFxuICogaHR0cHM6Ly90YWJhdGtpbnMuZ2l0aHViLmlvL3NwZWNzL2Nzcy1hcHBseS1ydWxlLy5cbiAqIFRoZSBhcHByb2FjaCBpcyB0byBjb252ZXJ0IGEgcHJvcGVydHkgbGlrZSB0aGlzOlxuICpcbiAqICAgIC0tZm9vOiB7Y29sb3I6IHJlZDsgYmFja2dyb3VuZDogYmx1ZTt9XG4gKlxuICogdG8gdGhpczpcbiAqXG4gKiAgICAtLWZvb18tX2NvbG9yOiByZWQ7XG4gKiAgICAtLWZvb18tX2JhY2tncm91bmQ6IGJsdWU7XG4gKlxuICogVGhlbiB3aGVyZSBgQGFwcGx5IC0tZm9vYCBpcyB1c2VkLCB0aGF0IGlzIGNvbnZlcnRlZCB0bzpcbiAqXG4gKiAgICBjb2xvcjogdmFyKC0tZm9vXy1fY29sb3IpO1xuICogICAgYmFja2dyb3VuZDogdmFyKC0tZm9vXy1fYmFja2dyb3VuZCk7XG4gKlxuICogVGhpcyBhcHByb2FjaCBnZW5lcmFsbHkgd29ya3MgYnV0IHRoZXJlIGFyZSBzb21lIGlzc3VlcyBhbmQgbGltaXRhdGlvbnMuXG4gKiBDb25zaWRlciwgZm9yIGV4YW1wbGUsIHRoYXQgc29tZXdoZXJlICpiZXR3ZWVuKiB3aGVyZSBgLS1mb29gIGlzIHNldCBhbmQgdXNlZCxcbiAqIGFub3RoZXIgZWxlbWVudCBzZXRzIGl0IHRvOlxuICpcbiAqICAgIC0tZm9vOiB7IGJvcmRlcjogMnB4IHNvbGlkIHJlZDsgfVxuICpcbiAqIFdlIG11c3Qgbm93IGVuc3VyZSB0aGF0IHRoZSBjb2xvciBhbmQgYmFja2dyb3VuZCBmcm9tIHRoZSBwcmV2aW91cyBzZXR0aW5nXG4gKiBkbyBub3QgYXBwbHkuIFRoaXMgaXMgYWNjb21wbGlzaGVkIGJ5IGNoYW5naW5nIHRoZSBwcm9wZXJ0eSBzZXQgdG8gdGhpczpcbiAqXG4gKiAgICAtLWZvb18tX2JvcmRlcjogMnB4IHNvbGlkIHJlZDtcbiAqICAgIC0tZm9vXy1fY29sb3I6IGluaXRpYWw7XG4gKiAgICAtLWZvb18tX2JhY2tncm91bmQ6IGluaXRpYWw7XG4gKlxuICogVGhpcyB3b3JrcyBidXQgaW50cm9kdWNlcyBvbmUgbmV3IGlzc3VlLlxuICogQ29uc2lkZXIgdGhpcyBzZXR1cCBhdCB0aGUgcG9pbnQgd2hlcmUgdGhlIGBAYXBwbHlgIGlzIHVzZWQ6XG4gKlxuICogICAgYmFja2dyb3VuZDogb3JhbmdlO1xuICogICAgYEBhcHBseWAgLS1mb287XG4gKlxuICogSW4gdGhpcyBjYXNlIHRoZSBiYWNrZ3JvdW5kIHdpbGwgYmUgdW5zZXQgKGluaXRpYWwpIHJhdGhlciB0aGFuIHRoZSBkZXNpcmVkXG4gKiBgb3JhbmdlYC4gV2UgYWRkcmVzcyB0aGlzIGJ5IGFsdGVyaW5nIHRoZSBwcm9wZXJ0eSBzZXQgdG8gdXNlIGEgZmFsbGJhY2tcbiAqIHZhbHVlIGxpa2UgdGhpczpcbiAqXG4gKiAgICBjb2xvcjogdmFyKC0tZm9vXy1fY29sb3IpO1xuICogICAgYmFja2dyb3VuZDogdmFyKC0tZm9vXy1fYmFja2dyb3VuZCwgb3JhbmdlKTtcbiAqICAgIGJvcmRlcjogdmFyKC0tZm9vXy1fYm9yZGVyKTtcbiAqXG4gKiBOb3RlIHRoYXQgdGhlIGRlZmF1bHQgaXMgcmV0YWluZWQgaW4gdGhlIHByb3BlcnR5IHNldCBhbmQgdGhlIGBiYWNrZ3JvdW5kYCBpc1xuICogdGhlIGRlc2lyZWQgYG9yYW5nZWAuIFRoaXMgbGVhZHMgdXMgdG8gYSBsaW1pdGF0aW9uLlxuICpcbiAqIExpbWl0YXRpb24gMTpcblxuICogT25seSBwcm9wZXJ0aWVzIGluIHRoZSBydWxlIHdoZXJlIHRoZSBgQGFwcGx5YFxuICogaXMgdXNlZCBhcmUgY29uc2lkZXJlZCBhcyBkZWZhdWx0IHZhbHVlcy5cbiAqIElmIGFub3RoZXIgcnVsZSBtYXRjaGVzIHRoZSBlbGVtZW50IGFuZCBzZXRzIGBiYWNrZ3JvdW5kYCB3aXRoXG4gKiBsZXNzIHNwZWNpZmljaXR5IHRoYW4gdGhlIHJ1bGUgaW4gd2hpY2ggYEBhcHBseWAgYXBwZWFycyxcbiAqIHRoZSBgYmFja2dyb3VuZGAgd2lsbCBub3QgYmUgc2V0LlxuICpcbiAqIExpbWl0YXRpb24gMjpcbiAqXG4gKiBXaGVuIHVzaW5nIFBvbHltZXIncyBgdXBkYXRlU3R5bGVzYCBhcGksIG5ldyBwcm9wZXJ0aWVzIG1heSBub3QgYmUgc2V0IGZvclxuICogYEBhcHBseWAgcHJvcGVydGllcy5cblxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge2ZvckVhY2hSdWxlLCBwcm9jZXNzVmFyaWFibGVBbmRGYWxsYmFjaywgcnVsZXNGb3JTdHlsZSwgdG9Dc3NUZXh0fSBmcm9tICcuL3N0eWxlLXV0aWwnXG5pbXBvcnQge01JWElOX01BVENILCBWQVJfQVNTSUdOfSBmcm9tICcuL2NvbW1vbi1yZWdleCdcbmltcG9ydCB7U3R5bGVOb2RlfSBmcm9tICcuL2Nzcy1wYXJzZScgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5jb25zdCBBUFBMWV9OQU1FX0NMRUFOID0gLztcXHMqL207XG5jb25zdCBJTklUSUFMX0lOSEVSSVQgPSAvXlxccyooaW5pdGlhbCl8KGluaGVyaXQpXFxzKiQvO1xuXG4vLyBzZXBhcmF0b3IgdXNlZCBiZXR3ZWVuIG1peGluLW5hbWUgYW5kIG1peGluLXByb3BlcnR5LW5hbWUgd2hlbiBwcm9kdWNpbmcgcHJvcGVydGllc1xuLy8gTk9URTogcGxhaW4gJy0nIG1heSBjYXVzZSBjb2xsaXNpb25zIGluIHVzZXIgc3R5bGVzXG5jb25zdCBNSVhJTl9WQVJfU0VQID0gJ18tXyc7XG5cbi8qKlxuICogQHR5cGVkZWYgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5sZXQgUHJvcGVydHlFbnRyeTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEB0eXBlZGVmIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbj59XG4gKi9cbmxldCBEZXBlbmRhbnRzRW50cnk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuLyoqIEB0eXBlZGVmIHt7XG4gKiAgICBwcm9wZXJ0aWVzOiBQcm9wZXJ0eUVudHJ5LFxuICogICAgZGVwZW5kYW50czogRGVwZW5kYW50c0VudHJ5XG4gKiB9fVxuICovXG5sZXQgTWl4aW5NYXBFbnRyeTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vLyBtYXAgb2YgbWl4aW4gdG8gcHJvcGVydHkgbmFtZXNcbi8vIC0tZm9vOiB7Ym9yZGVyOiAycHh9IC0+IHtwcm9wZXJ0aWVzOiB7KC0tZm9vLCBbJ2JvcmRlciddKX0sIGRlcGVuZGFudHM6IHsnZWxlbWVudC1uYW1lJzogcHJvdG99fVxuY2xhc3MgTWl4aW5NYXAge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCAhTWl4aW5NYXBFbnRyeT59ICovXG4gICAgdGhpcy5fbWFwID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RW50cnl9IHByb3BzXG4gICAqL1xuICBzZXQobmFtZSwgcHJvcHMpIHtcbiAgICBuYW1lID0gbmFtZS50cmltKCk7XG4gICAgdGhpcy5fbWFwW25hbWVdID0ge1xuICAgICAgcHJvcGVydGllczogcHJvcHMsXG4gICAgICBkZXBlbmRhbnRzOiB7fVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7TWl4aW5NYXBFbnRyeX1cbiAgICovXG4gIGdldChuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUudHJpbSgpO1xuICAgIHJldHVybiB0aGlzLl9tYXBbbmFtZV0gfHwgbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciB3aGVuIGFuIGVsZW1lbnQgaXMgbWFya2VkIGludmFsaWRcbiAqIEB0eXBlIHs/ZnVuY3Rpb24oc3RyaW5nKX1cbiAqL1xubGV0IGludmFsaWRDYWxsYmFjayA9IG51bGw7XG5cbi8qKiBAdW5yZXN0cmljdGVkICovXG5jbGFzcyBBcHBseVNoaW0ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7SFRNTE1ldGFFbGVtZW50fSAqL1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLl9tYXAgPSBuZXcgTWl4aW5NYXAoKTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJuIHRydWUgaWYgYGNzc1RleHRgIGNvbnRhaW5zIGEgbWl4aW4gZGVmaW5pdGlvbiBvciBjb25zdW1wdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZGV0ZWN0TWl4aW4oY3NzVGV4dCkge1xuICAgIGNvbnN0IGhhcyA9IE1JWElOX01BVENILnRlc3QoY3NzVGV4dCkgfHwgVkFSX0FTU0lHTi50ZXN0KGNzc1RleHQpO1xuICAgIC8vIHJlc2V0IHN0YXRlIG9mIHRoZSByZWdleGVzXG4gICAgTUlYSU5fTUFUQ0gubGFzdEluZGV4ID0gMDtcbiAgICBWQVJfQVNTSUdOLmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIGhhcztcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAgICovXG4gIHRyYW5zZm9ybVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSkge1xuICAgIGNvbnN0IHN0eWxlID0gLyoqIEB0eXBlIHtIVE1MU3R5bGVFbGVtZW50fSAqLyh0ZW1wbGF0ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIGxldCBhc3QgPSBudWxsO1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgYXN0ID0gdGhpcy50cmFuc2Zvcm1TdHlsZShzdHlsZSwgZWxlbWVudE5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gYXN0O1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICogQHJldHVybiB7U3R5bGVOb2RlfVxuICAgKi9cbiAgdHJhbnNmb3JtU3R5bGUoc3R5bGUsIGVsZW1lbnROYW1lID0gJycpIHtcbiAgICBsZXQgYXN0ID0gcnVsZXNGb3JTdHlsZShzdHlsZSk7XG4gICAgdGhpcy50cmFuc2Zvcm1SdWxlcyhhc3QsIGVsZW1lbnROYW1lKTtcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IHRvQ3NzVGV4dChhc3QpO1xuICAgIHJldHVybiBhc3Q7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gICAqIEByZXR1cm4ge1N0eWxlTm9kZX1cbiAgICovXG4gIHRyYW5zZm9ybUN1c3RvbVN0eWxlKHN0eWxlKSB7XG4gICAgbGV0IGFzdCA9IHJ1bGVzRm9yU3R5bGUoc3R5bGUpO1xuICAgIGZvckVhY2hSdWxlKGFzdCwgKHJ1bGUpID0+IHtcbiAgICAgIGlmIChydWxlWydzZWxlY3RvciddID09PSAnOnJvb3QnKSB7XG4gICAgICAgIHJ1bGVbJ3NlbGVjdG9yJ10gPSAnaHRtbCc7XG4gICAgICB9XG4gICAgICB0aGlzLnRyYW5zZm9ybVJ1bGUocnVsZSk7XG4gICAgfSlcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IHRvQ3NzVGV4dChhc3QpO1xuICAgIHJldHVybiBhc3Q7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBydWxlc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICovXG4gIHRyYW5zZm9ybVJ1bGVzKHJ1bGVzLCBlbGVtZW50TmFtZSkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudE5hbWU7XG4gICAgZm9yRWFjaFJ1bGUocnVsZXMsIChyKSA9PiB7XG4gICAgICB0aGlzLnRyYW5zZm9ybVJ1bGUocik7XG4gICAgfSk7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFTdHlsZU5vZGV9IHJ1bGVcbiAgICovXG4gIHRyYW5zZm9ybVJ1bGUocnVsZSkge1xuICAgIHJ1bGVbJ2Nzc1RleHQnXSA9IHRoaXMudHJhbnNmb3JtQ3NzVGV4dChydWxlWydwYXJzZWRDc3NUZXh0J10pO1xuICAgIC8vIDpyb290IHdhcyBvbmx5IHVzZWQgZm9yIHZhcmlhYmxlIGFzc2lnbm1lbnQgaW4gcHJvcGVydHkgc2hpbSxcbiAgICAvLyBidXQgZ2VuZXJhdGVzIGludmFsaWQgc2VsZWN0b3JzIHdpdGggcmVhbCBwcm9wZXJ0aWVzLlxuICAgIC8vIHJlcGxhY2Ugd2l0aCBgOmhvc3QgPiAqYCwgd2hpY2ggc2VydmVzIHRoZSBzYW1lIGVmZmVjdFxuICAgIGlmIChydWxlWydzZWxlY3RvciddID09PSAnOnJvb3QnKSB7XG4gICAgICBydWxlWydzZWxlY3RvciddID0gJzpob3N0ID4gKic7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0cmFuc2Zvcm1Dc3NUZXh0KGNzc1RleHQpIHtcbiAgICAvLyBwcm9kdWNlIHZhcmlhYmxlc1xuICAgIGNzc1RleHQgPSBjc3NUZXh0LnJlcGxhY2UoVkFSX0FTU0lHTiwgKG1hdGNoVGV4dCwgcHJvcGVydHlOYW1lLCB2YWx1ZVByb3BlcnR5LCB2YWx1ZU1peGluKSA9PlxuICAgICAgdGhpcy5fcHJvZHVjZUNzc1Byb3BlcnRpZXMobWF0Y2hUZXh0LCBwcm9wZXJ0eU5hbWUsIHZhbHVlUHJvcGVydHksIHZhbHVlTWl4aW4pKTtcbiAgICAvLyBjb25zdW1lIG1peGluc1xuICAgIHJldHVybiB0aGlzLl9jb25zdW1lQ3NzUHJvcGVydGllcyhjc3NUZXh0KTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIF9nZXRJbml0aWFsVmFsdWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgIGlmICghdGhpcy5fbWVhc3VyZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX21lYXN1cmVFbGVtZW50ID0gLyoqIEB0eXBlIHtIVE1MTWV0YUVsZW1lbnR9ICovKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ21ldGEnKSk7XG4gICAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FwcGx5LXNoaW0tbWVhc3VyZScsICcnKTtcbiAgICAgIHRoaXMuX21lYXN1cmVFbGVtZW50LnN0eWxlLmFsbCA9ICdpbml0aWFsJztcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodGhpcy5fbWVhc3VyZUVsZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5fbWVhc3VyZUVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xuICB9XG4gIC8qKlxuICAgKiByZXBsYWNlIG1peGluIGNvbnN1bXB0aW9uIHdpdGggdmFyaWFibGUgY29uc3VtcHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX2NvbnN1bWVDc3NQcm9wZXJ0aWVzKHRleHQpIHtcbiAgICAvKiogQHR5cGUge0FycmF5fSAqL1xuICAgIGxldCBtID0gbnVsbDtcbiAgICAvLyBsb29wIG92ZXIgdGV4dCB1bnRpbCBhbGwgbWl4aW5zIHdpdGggZGVmaW50aW9ucyBoYXZlIGJlZW4gYXBwbGllZFxuICAgIHdoaWxlKChtID0gTUlYSU5fTUFUQ0guZXhlYyh0ZXh0KSkpIHtcbiAgICAgIGxldCBtYXRjaFRleHQgPSBtWzBdO1xuICAgICAgbGV0IG1peGluTmFtZSA9IG1bMV07XG4gICAgICBsZXQgaWR4ID0gbS5pbmRleDtcbiAgICAgIC8vIGNvbGxlY3QgcHJvcGVydGllcyBiZWZvcmUgYXBwbHkgdG8gYmUgXCJkZWZhdWx0c1wiIGlmIG1peGluIG1pZ2h0IG92ZXJyaWRlIHRoZW1cbiAgICAgIC8vIG1hdGNoIGluY2x1ZGVzIGEgXCJwcmVmaXhcIiwgc28gZmluZCB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgb2YgQGFwcGx5XG4gICAgICBsZXQgYXBwbHlQb3MgPSBpZHggKyBtYXRjaFRleHQuaW5kZXhPZignQGFwcGx5Jyk7XG4gICAgICBsZXQgYWZ0ZXJBcHBseVBvcyA9IGlkeCArIG1hdGNoVGV4dC5sZW5ndGg7XG4gICAgICAvLyBmaW5kIHByb3BzIGRlZmluZWQgYmVmb3JlIHRoaXMgQGFwcGx5XG4gICAgICBsZXQgdGV4dEJlZm9yZUFwcGx5ID0gdGV4dC5zbGljZSgwLCBhcHBseVBvcyk7XG4gICAgICBsZXQgdGV4dEFmdGVyQXBwbHkgPSB0ZXh0LnNsaWNlKGFmdGVyQXBwbHlQb3MpO1xuICAgICAgbGV0IGRlZmF1bHRzID0gdGhpcy5fY3NzVGV4dFRvTWFwKHRleHRCZWZvcmVBcHBseSk7XG4gICAgICBsZXQgcmVwbGFjZW1lbnQgPSB0aGlzLl9hdEFwcGx5VG9Dc3NQcm9wZXJ0aWVzKG1peGluTmFtZSwgZGVmYXVsdHMpO1xuICAgICAgLy8gdXNlIHJlZ2V4IG1hdGNoIHBvc2l0aW9uIHRvIHJlcGxhY2UgbWl4aW4sIGtlZXAgbGluZWFyIHByb2Nlc3NpbmcgdGltZVxuICAgICAgdGV4dCA9IGAke3RleHRCZWZvcmVBcHBseX0ke3JlcGxhY2VtZW50fSR7dGV4dEFmdGVyQXBwbHl9YDtcbiAgICAgIC8vIG1vdmUgcmVnZXggc2VhcmNoIHRvIF9hZnRlcl8gcmVwbGFjZW1lbnRcbiAgICAgIE1JWElOX01BVENILmxhc3RJbmRleCA9IGlkeCArIHJlcGxhY2VtZW50Lmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgLyoqXG4gICAqIHByb2R1Y2UgdmFyaWFibGUgY29uc3VtcHRpb24gYXQgdGhlIHNpdGUgb2YgbWl4aW4gY29uc3VtcHRpb25cbiAgICogYEBhcHBseWAgLS1mb287IC0+IGZvciBhbGwgcHJvcHMgKCR7cHJvcG5hbWV9OiB2YXIoLS1mb29fLV8ke3Byb3BuYW1lfSwgJHtmYWxsYmFja1twcm9wbmFtZV19fSkpXG4gICAqIEV4YW1wbGU6XG4gICAqICBib3JkZXI6IHZhcigtLWZvb18tX2JvcmRlcik7IHBhZGRpbmc6IHZhcigtLWZvb18tX3BhZGRpbmcsIDJweClcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1peGluTmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFsbGJhY2tzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIF9hdEFwcGx5VG9Dc3NQcm9wZXJ0aWVzKG1peGluTmFtZSwgZmFsbGJhY2tzKSB7XG4gICAgbWl4aW5OYW1lID0gbWl4aW5OYW1lLnJlcGxhY2UoQVBQTFlfTkFNRV9DTEVBTiwgJycpO1xuICAgIGxldCB2YXJzID0gW107XG4gICAgbGV0IG1peGluRW50cnkgPSB0aGlzLl9tYXAuZ2V0KG1peGluTmFtZSk7XG4gICAgLy8gaWYgd2UgZGVwZW5kIG9uIGEgbWl4aW4gYmVmb3JlIGl0IGlzIGNyZWF0ZWRcbiAgICAvLyBtYWtlIGEgc2VudGluZWwgZW50cnkgaW4gdGhlIG1hcCB0byBhZGQgdGhpcyBlbGVtZW50IGFzIGEgZGVwZW5kZW5jeSBmb3Igd2hlbiBpdCBpcyBkZWZpbmVkLlxuICAgIGlmICghbWl4aW5FbnRyeSkge1xuICAgICAgdGhpcy5fbWFwLnNldChtaXhpbk5hbWUsIHt9KTtcbiAgICAgIG1peGluRW50cnkgPSB0aGlzLl9tYXAuZ2V0KG1peGluTmFtZSk7XG4gICAgfVxuICAgIGlmIChtaXhpbkVudHJ5KSB7XG4gICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgbWl4aW5FbnRyeS5kZXBlbmRhbnRzW3RoaXMuX2N1cnJlbnRFbGVtZW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgICBsZXQgcCwgcGFydHMsIGY7XG4gICAgICBmb3IgKHAgaW4gbWl4aW5FbnRyeS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIGYgPSBmYWxsYmFja3MgJiYgZmFsbGJhY2tzW3BdO1xuICAgICAgICBwYXJ0cyA9IFtwLCAnOiB2YXIoJywgbWl4aW5OYW1lLCBNSVhJTl9WQVJfU0VQLCBwXTtcbiAgICAgICAgaWYgKGYpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKCcsJywgZik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaCgnKScpO1xuICAgICAgICB2YXJzLnB1c2gocGFydHMuam9pbignJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFycy5qb2luKCc7ICcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX3JlcGxhY2VJbml0aWFsT3JJbmhlcml0KHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIGxldCBtYXRjaCA9IElOSVRJQUxfSU5IRVJJVC5leGVjKHZhbHVlKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAvLyBpbml0aWFsXG4gICAgICAgIC8vIHJlcGxhY2UgYGluaXRpYWxgIHdpdGggdGhlIGNvbmNyZXRlIGluaXRpYWwgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHlcbiAgICAgICAgdmFsdWUgPSB0aGlzLl9nZXRJbml0aWFsVmFsdWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbmhlcml0XG4gICAgICAgIC8vIHdpdGggdGhpcyBwdXJwb3NmdWxseSBpbGxlZ2FsIHZhbHVlLCB0aGUgdmFyaWFibGUgd2lsbCBiZSBpbnZhbGlkIGF0XG4gICAgICAgIC8vIGNvbXB1dGUgdGltZSAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy12YXJpYWJsZXMvI2ludmFsaWQtYXQtY29tcHV0ZWQtdmFsdWUtdGltZSlcbiAgICAgICAgLy8gYW5kIGZvciBpbmhlcml0aW5nIHZhbHVlcywgd2lsbCBiZWhhdmUgc2ltaWxhcmx5XG4gICAgICAgIC8vIHdlIGNhbm5vdCBzdXBwb3J0IHRoZSBzYW1lIGJlaGF2aW9yIGZvciBub24gaW5oZXJpdGluZyB2YWx1ZXMgbGlrZSAnYm9yZGVyJ1xuICAgICAgICB2YWx1ZSA9ICdhcHBseS1zaGltLWluaGVyaXQnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogXCJwYXJzZVwiIGEgbWl4aW4gZGVmaW5pdGlvbiBpbnRvIGEgbWFwIG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgKiBjc3NUZXh0VG9NYXAoJ2JvcmRlcjogMnB4IHNvbGlkIGJsYWNrJykgLT4gKCdib3JkZXInLCAnMnB4IHNvbGlkIGJsYWNrJylcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gICAqL1xuICBfY3NzVGV4dFRvTWFwKHRleHQpIHtcbiAgICBsZXQgcHJvcHMgPSB0ZXh0LnNwbGl0KCc7Jyk7XG4gICAgbGV0IHByb3BlcnR5LCB2YWx1ZTtcbiAgICBsZXQgb3V0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDAsIHAsIHNwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHAgPSBwcm9wc1tpXTtcbiAgICAgIGlmIChwKSB7XG4gICAgICAgIHNwID0gcC5zcGxpdCgnOicpO1xuICAgICAgICAvLyBpZ25vcmUgbGluZXMgdGhhdCBhcmVuJ3QgZGVmaW5pdGlvbnMgbGlrZSBAbWVkaWFcbiAgICAgICAgaWYgKHNwLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBwcm9wZXJ0eSA9IHNwWzBdLnRyaW0oKTtcbiAgICAgICAgICAvLyBzb21lIHByb3BlcnRpZXMgbWF5IGhhdmUgJzonIGluIHRoZSB2YWx1ZSwgbGlrZSBkYXRhIHVybHNcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3JlcGxhY2VJbml0aWFsT3JJbmhlcml0KHByb3BlcnR5LCBzcC5zbGljZSgxKS5qb2luKCc6JykpO1xuICAgICAgICAgIG91dFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TWl4aW5NYXBFbnRyeX0gbWl4aW5FbnRyeVxuICAgKi9cbiAgX2ludmFsaWRhdGVNaXhpbkVudHJ5KG1peGluRW50cnkpIHtcbiAgICBpZiAoIWludmFsaWRDYWxsYmFjaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBlbGVtZW50TmFtZSBpbiBtaXhpbkVudHJ5LmRlcGVuZGFudHMpIHtcbiAgICAgIGlmIChlbGVtZW50TmFtZSAhPT0gdGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgaW52YWxpZENhbGxiYWNrKGVsZW1lbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoVGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlOYW1lXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWVQcm9wZXJ0eVxuICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlTWl4aW5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX3Byb2R1Y2VDc3NQcm9wZXJ0aWVzKG1hdGNoVGV4dCwgcHJvcGVydHlOYW1lLCB2YWx1ZVByb3BlcnR5LCB2YWx1ZU1peGluKSB7XG4gICAgLy8gaGFuZGxlIGNhc2Ugd2hlcmUgcHJvcGVydHkgdmFsdWUgaXMgYSBtaXhpblxuICAgIGlmICh2YWx1ZVByb3BlcnR5KSB7XG4gICAgICAvLyBmb3JtOiAtLW1peGluMjogdmFyKC0tbWl4aW4xKSwgd2hlcmUgLS1taXhpbjEgaXMgaW4gdGhlIG1hcFxuICAgICAgcHJvY2Vzc1ZhcmlhYmxlQW5kRmFsbGJhY2sodmFsdWVQcm9wZXJ0eSwgKHByZWZpeCwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICYmIHRoaXMuX21hcC5nZXQodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWVNaXhpbiA9IGBAYXBwbHkgJHt2YWx1ZX07YFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZU1peGluKSB7XG4gICAgICByZXR1cm4gbWF0Y2hUZXh0O1xuICAgIH1cbiAgICBsZXQgbWl4aW5Bc1Byb3BlcnRpZXMgPSB0aGlzLl9jb25zdW1lQ3NzUHJvcGVydGllcyh2YWx1ZU1peGluKTtcbiAgICBsZXQgcHJlZml4ID0gbWF0Y2hUZXh0LnNsaWNlKDAsIG1hdGNoVGV4dC5pbmRleE9mKCctLScpKTtcbiAgICBsZXQgbWl4aW5WYWx1ZXMgPSB0aGlzLl9jc3NUZXh0VG9NYXAobWl4aW5Bc1Byb3BlcnRpZXMpO1xuICAgIGxldCBjb21iaW5lZFByb3BzID0gbWl4aW5WYWx1ZXM7XG4gICAgbGV0IG1peGluRW50cnkgPSB0aGlzLl9tYXAuZ2V0KHByb3BlcnR5TmFtZSk7XG4gICAgbGV0IG9sZFByb3BzID0gbWl4aW5FbnRyeSAmJiBtaXhpbkVudHJ5LnByb3BlcnRpZXM7XG4gICAgaWYgKG9sZFByb3BzKSB7XG4gICAgICAvLyBOT1RFOiBzaW5jZSB3ZSB1c2UgbWl4aW4sIHRoZSBtYXAgb2YgcHJvcGVydGllcyBpcyB1cGRhdGVkIGhlcmVcbiAgICAgIC8vIGFuZCB0aGlzIGlzIHdoYXQgd2Ugd2FudC5cbiAgICAgIGNvbWJpbmVkUHJvcHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUob2xkUHJvcHMpLCBtaXhpblZhbHVlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX21hcC5zZXQocHJvcGVydHlOYW1lLCBjb21iaW5lZFByb3BzKTtcbiAgICB9XG4gICAgbGV0IG91dCA9IFtdO1xuICAgIGxldCBwLCB2O1xuICAgIC8vIHNldCB2YXJpYWJsZXMgZGVmaW5lZCBieSBjdXJyZW50IG1peGluXG4gICAgbGV0IG5lZWRUb0ludmFsaWRhdGUgPSBmYWxzZTtcbiAgICBmb3IgKHAgaW4gY29tYmluZWRQcm9wcykge1xuICAgICAgdiA9IG1peGluVmFsdWVzW3BdO1xuICAgICAgLy8gaWYgcHJvcGVydHkgbm90IGRlZmluZWQgYnkgY3VycmVudCBtaXhpbiwgc2V0IGluaXRpYWxcbiAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdiA9ICdpbml0aWFsJztcbiAgICAgIH1cbiAgICAgIGlmIChvbGRQcm9wcyAmJiAhKHAgaW4gb2xkUHJvcHMpKSB7XG4gICAgICAgIG5lZWRUb0ludmFsaWRhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgb3V0LnB1c2goYCR7cHJvcGVydHlOYW1lfSR7TUlYSU5fVkFSX1NFUH0ke3B9OiAke3Z9YCk7XG4gICAgfVxuICAgIGlmIChuZWVkVG9JbnZhbGlkYXRlKSB7XG4gICAgICB0aGlzLl9pbnZhbGlkYXRlTWl4aW5FbnRyeShtaXhpbkVudHJ5KTtcbiAgICB9XG4gICAgaWYgKG1peGluRW50cnkpIHtcbiAgICAgIG1peGluRW50cnkucHJvcGVydGllcyA9IGNvbWJpbmVkUHJvcHM7XG4gICAgfVxuICAgIC8vIGJlY2F1c2UgdGhlIG1peGluTWFwIGlzIGdsb2JhbCwgdGhlIG1peGluIG1pZ2h0IGNvbmZsaWN0IHdpdGhcbiAgICAvLyBhIGRpZmZlcmVudCBzY29wZSdzIHNpbXBsZSB2YXJpYWJsZSBkZWZpbml0aW9uOlxuICAgIC8vIEV4YW1wbGU6XG4gICAgLy8gc29tZSBzdHlsZSBzb21ld2hlcmU6XG4gICAgLy8gLS1taXhpbjE6eyAuLi4gfVxuICAgIC8vIC0tbWl4aW4yOiB2YXIoLS1taXhpbjEpO1xuICAgIC8vIHNvbWUgb3RoZXIgZWxlbWVudDpcbiAgICAvLyAtLW1peGluMTogMTBweCBzb2xpZCByZWQ7XG4gICAgLy8gLS1mb286IHZhcigtLW1peGluMSk7XG4gICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSBsZWF2ZSB0aGUgb3JpZ2luYWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbiBwbGFjZS5cbiAgICBpZiAodmFsdWVQcm9wZXJ0eSkge1xuICAgICAgcHJlZml4ID0gYCR7bWF0Y2hUZXh0fTske3ByZWZpeH1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7cHJlZml4fSR7b3V0LmpvaW4oJzsgJyl9O2A7XG4gIH1cbn1cblxuLyogZXhwb3J0cyAqL1xuQXBwbHlTaGltLnByb3RvdHlwZVsnZGV0ZWN0TWl4aW4nXSA9IEFwcGx5U2hpbS5wcm90b3R5cGUuZGV0ZWN0TWl4aW47XG5BcHBseVNoaW0ucHJvdG90eXBlWyd0cmFuc2Zvcm1TdHlsZSddID0gQXBwbHlTaGltLnByb3RvdHlwZS50cmFuc2Zvcm1TdHlsZTtcbkFwcGx5U2hpbS5wcm90b3R5cGVbJ3RyYW5zZm9ybUN1c3RvbVN0eWxlJ10gPSBBcHBseVNoaW0ucHJvdG90eXBlLnRyYW5zZm9ybUN1c3RvbVN0eWxlO1xuQXBwbHlTaGltLnByb3RvdHlwZVsndHJhbnNmb3JtUnVsZXMnXSA9IEFwcGx5U2hpbS5wcm90b3R5cGUudHJhbnNmb3JtUnVsZXM7XG5BcHBseVNoaW0ucHJvdG90eXBlWyd0cmFuc2Zvcm1SdWxlJ10gPSBBcHBseVNoaW0ucHJvdG90eXBlLnRyYW5zZm9ybVJ1bGU7XG5BcHBseVNoaW0ucHJvdG90eXBlWyd0cmFuc2Zvcm1UZW1wbGF0ZSddID0gQXBwbHlTaGltLnByb3RvdHlwZS50cmFuc2Zvcm1UZW1wbGF0ZTtcbkFwcGx5U2hpbS5wcm90b3R5cGVbJ19zZXBhcmF0b3InXSA9IE1JWElOX1ZBUl9TRVA7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwbHlTaGltLnByb3RvdHlwZSwgJ2ludmFsaWRDYWxsYmFjaycsIHtcbiAgLyoqIEByZXR1cm4gez9mdW5jdGlvbihzdHJpbmcpfSAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIGludmFsaWRDYWxsYmFjaztcbiAgfSxcbiAgLyoqIEBwYXJhbSB7P2Z1bmN0aW9uKHN0cmluZyl9IGNiICovXG4gIHNldChjYikge1xuICAgIGludmFsaWRDYWxsYmFjayA9IGNiO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwbHlTaGltOyIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCAhSFRNTFRlbXBsYXRlRWxlbWVudD59XG4gKi9cbmNvbnN0IHRlbXBsYXRlTWFwID0ge307XG5leHBvcnQgZGVmYXVsdCB0ZW1wbGF0ZU1hcDtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB0ZW1wbGF0ZU1hcCBmcm9tICcuL3RlbXBsYXRlLW1hcCdcbmltcG9ydCB7U3R5bGVOb2RlfSBmcm9tICcuL2Nzcy1wYXJzZScgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEBjb25zdCB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZShlbGVtZW50TmFtZSl7XG4gIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgaWYgKHRlbXBsYXRlKSB7XG4gICAgaW52YWxpZGF0ZVRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRhdGVUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICB0ZW1wbGF0ZVsnX2FwcGx5U2hpbUludmFsaWQnXSA9IHRydWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZChlbGVtZW50TmFtZSkge1xuICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtlbGVtZW50TmFtZV07XG4gIGlmICh0ZW1wbGF0ZSkge1xuICAgIHJldHVybiB0ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpIHtcbiAgcmV0dXJuICF0ZW1wbGF0ZVsnX2FwcGx5U2hpbUludmFsaWQnXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkYXRpbmcoZWxlbWVudE5hbWUpIHtcbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdO1xuICBpZiAodGVtcGxhdGUpIHtcbiAgICByZXR1cm4gdGVtcGxhdGVJc1ZhbGlkYXRpbmcodGVtcGxhdGUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVJc1ZhbGlkYXRpbmcodGVtcGxhdGUpIHtcbiAgcmV0dXJuIHRlbXBsYXRlLl92YWxpZGF0aW5nO1xufVxuXG4vKipcbiAqIHRoZSB0ZW1wbGF0ZSBpcyBtYXJrZWQgYXMgYHZhbGlkYXRpbmdgIGZvciBvbmUgbWljcm90YXNrIHNvIHRoYXQgYWxsIGluc3RhbmNlc1xuICogZm91bmQgaW4gdGhlIHRyZWUgY3Jhd2wgb2YgYGFwcGx5U3R5bGVgIHdpbGwgdXBkYXRlIHRoZW1zZWx2ZXMsXG4gKiBidXQgdGhlIHRlbXBsYXRlIHdpbGwgb25seSBiZSB1cGRhdGVkIG9uY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRWYWxpZGF0aW5nKGVsZW1lbnROYW1lKSB7XG4gIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgc3RhcnRWYWxpZGF0aW5nVGVtcGxhdGUodGVtcGxhdGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VmFsaWRhdGluZ1RlbXBsYXRlKHRlbXBsYXRlKSB7XG4gIGlmICghdGVtcGxhdGUuX3ZhbGlkYXRpbmcpIHtcbiAgICB0ZW1wbGF0ZS5fdmFsaWRhdGluZyA9IHRydWU7XG4gICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgdGVtcGxhdGVbJ19hcHBseVNoaW1JbnZhbGlkJ10gPSBmYWxzZTtcbiAgICAgIHRlbXBsYXRlLl92YWxpZGF0aW5nID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudHNBcmVJbnZhbGlkKCkge1xuICBmb3IgKGxldCBlbGVtZW50TmFtZSBpbiB0ZW1wbGF0ZU1hcCkge1xuICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgICBpZiAoIXRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59IiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVOYXRpdmVQcm9wZXJ0aWVzKGVsZW1lbnQsIHByb3BlcnRpZXMpIHtcbiAgLy8gcmVtb3ZlIHByZXZpb3VzIHByb3BlcnRpZXNcbiAgZm9yIChsZXQgcCBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgLy8gTk9URTogZm9yIGJjIHdpdGggc2hpbSwgZG9uJ3QgYXBwbHkgbnVsbCB2YWx1ZXMuXG4gICAgaWYgKHAgPT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkocCwgcHJvcGVydGllc1twXSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkudHJpbSgpO1xufSIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEFwcGx5U2hpbSBmcm9tICcuLi9zcmMvYXBwbHktc2hpbSdcbmltcG9ydCB0ZW1wbGF0ZU1hcCBmcm9tICcuLi9zcmMvdGVtcGxhdGUtbWFwJ1xuaW1wb3J0IHtnZXRJc0V4dGVuZHN9IGZyb20gJy4uL3NyYy9zdHlsZS11dGlsJ1xuaW1wb3J0ICogYXMgQXBwbHlTaGltVXRpbHMgZnJvbSAnLi4vc3JjL2FwcGx5LXNoaW0tdXRpbHMnXG5pbXBvcnQge2dldENvbXB1dGVkU3R5bGVWYWx1ZSwgdXBkYXRlTmF0aXZlUHJvcGVydGllc30gZnJvbSAnLi4vc3JjL2NvbW1vbi11dGlscydcblxuLyoqIEBjb25zdCB7QXBwbHlTaGltfSAqL1xuY29uc3QgYXBwbHlTaGltID0gbmV3IEFwcGx5U2hpbSgpO1xuXG5jbGFzcyBBcHBseVNoaW1JbnRlcmZhY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlID0gbnVsbDtcbiAgICB0aGlzLmJvb3RlZCA9IGZhbHNlO1xuICB9XG4gIGVuc3VyZSgpIHtcbiAgICBpZiAodGhpcy5ib290ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZSA9IHdpbmRvd1snU2hhZHlDU1MnXVsnQ3VzdG9tU3R5bGVJbnRlcmZhY2UnXTtcbiAgICBpZiAodGhpcy5jdXN0b21TdHlsZUludGVyZmFjZSkge1xuICAgICAgdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsndHJhbnNmb3JtQ2FsbGJhY2snXSA9IChzdHlsZSkgPT4ge1xuICAgICAgICBhcHBseVNoaW0udHJhbnNmb3JtQ3VzdG9tU3R5bGUoc3R5bGUpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuY3VzdG9tU3R5bGVJbnRlcmZhY2VbJ3ZhbGlkYXRlQ2FsbGJhY2snXSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5mbHVzaEN1c3RvbVN0eWxlcygpO1xuICAgICAgICBpZiAoQXBwbHlTaGltVXRpbHMuZWxlbWVudHNBcmVJbnZhbGlkKCkpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlRG9jdW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmJvb3RlZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgKi9cbiAgcHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSkge1xuICAgIHRoaXMuZW5zdXJlKCk7XG4gICAgdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdID0gdGVtcGxhdGU7XG4gICAgYXBwbHlTaGltLnRyYW5zZm9ybVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSk7XG4gIH1cbiAgZmx1c2hDdXN0b21TdHlsZXMoKSB7XG4gICAgdGhpcy5lbnN1cmUoKTtcbiAgICBpZiAodGhpcy5jdXN0b21TdHlsZUludGVyZmFjZSkge1xuICAgICAgdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsnZmluZFN0eWxlcyddKCk7XG4gICAgICBsZXQgc3R5bGVzID0gdGhpcy5jdXN0b21TdHlsZUludGVyZmFjZVsnY3VzdG9tU3R5bGVzJ107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgbGV0IGNzID0gc3R5bGVzW2ldO1xuICAgICAgICBsZXQgc3R5bGUgPSB0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydnZXRTdHlsZUZvckN1c3RvbVN0eWxlJ10oY3MpO1xuICAgICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgICBhcHBseVNoaW0udHJhbnNmb3JtQ3VzdG9tU3R5bGUoc3R5bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmN1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdHlsZVN1YnRyZWUoZWxlbWVudCwgcHJvcGVydGllcykge1xuICAgIHRoaXMuZW5zdXJlKCk7XG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIHVwZGF0ZU5hdGl2ZVByb3BlcnRpZXMoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgbGV0IHNoYWRvd0NoaWxkcmVuID0gZWxlbWVudC5zaGFkb3dSb290LmNoaWxkcmVuIHx8IGVsZW1lbnQuc2hhZG93Um9vdC5jaGlsZE5vZGVzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFkb3dDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnN0eWxlU3VidHJlZShzaGFkb3dDaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4gfHwgZWxlbWVudC5jaGlsZE5vZGVzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3R5bGVTdWJ0cmVlKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgKi9cbiAgc3R5bGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB0aGlzLmVuc3VyZSgpO1xuICAgIGxldCB7aXN9ID0gZ2V0SXNFeHRlbmRzKGVsZW1lbnQpO1xuICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2lzXTtcbiAgICBpZiAodGVtcGxhdGUgJiYgIUFwcGx5U2hpbVV0aWxzLnRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSkpIHtcbiAgICAgIC8vIG9ubHkgcmV2YWxpZGF0ZSB0ZW1wbGF0ZSBvbmNlXG4gICAgICBpZiAoIUFwcGx5U2hpbVV0aWxzLnRlbXBsYXRlSXNWYWxpZGF0aW5nKHRlbXBsYXRlKSkge1xuICAgICAgICB0aGlzLnByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgaXMpO1xuICAgICAgICBBcHBseVNoaW1VdGlscy5zdGFydFZhbGlkYXRpbmdUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICB9XG4gICAgICAvLyB1cGRhdGUgYWxsIGluc3RhbmNlc1xuICAgICAgbGV0IHJvb3QgPSBlbGVtZW50LnNoYWRvd1Jvb3Q7XG4gICAgICBpZiAocm9vdCkge1xuICAgICAgICBsZXQgc3R5bGUgPSAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovKHJvb3QucXVlcnlTZWxlY3Rvcignc3R5bGUnKSk7XG4gICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgIGFwcGx5U2hpbS50cmFuc2Zvcm1TdHlsZShzdHlsZSwgaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICovXG4gIHN0eWxlRG9jdW1lbnQocHJvcGVydGllcykge1xuICAgIHRoaXMuZW5zdXJlKCk7XG4gICAgdGhpcy5zdHlsZVN1YnRyZWUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBwcm9wZXJ0aWVzKTtcbiAgfVxufVxuXG5jb25zdCBhcHBseVNoaW1JbnRlcmZhY2UgPSBuZXcgQXBwbHlTaGltSW50ZXJmYWNlKCk7XG5cbmlmICghd2luZG93WydTaGFkeUNTUyddIHx8ICF3aW5kb3dbJ1NoYWR5Q1NTJ11bJ1Njb3BpbmdTaGltJ10pIHtcbiAgbGV0IEN1c3RvbVN0eWxlSW50ZXJmYWNlID0gd2luZG93WydTaGFkeUNTUyddICYmIHdpbmRvd1snU2hhZHlDU1MnXVsnQ3VzdG9tU3R5bGVJbnRlcmZhY2UnXTtcblxuICB3aW5kb3dbJ1NoYWR5Q1NTJ10gPSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZWxlbWVudEV4dGVuZHNcbiAgICAgKi9cbiAgICBbJ3ByZXBhcmVUZW1wbGF0ZSddKHRlbXBsYXRlLCBlbGVtZW50TmFtZSwgZWxlbWVudEV4dGVuZHMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2UucHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgWydzdHlsZVN1YnRyZWUnXShlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2UuZmx1c2hDdXN0b21TdHlsZXMoKTtcbiAgICAgIGFwcGx5U2hpbUludGVyZmFjZS5zdHlsZVN1YnRyZWUoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqL1xuICAgIFsnc3R5bGVFbGVtZW50J10oZWxlbWVudCkge1xuICAgICAgYXBwbHlTaGltSW50ZXJmYWNlLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2Uuc3R5bGVFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBbJ3N0eWxlRG9jdW1lbnQnXShwcm9wZXJ0aWVzKSB7XG4gICAgICBhcHBseVNoaW1JbnRlcmZhY2UuZmx1c2hDdXN0b21TdHlsZXMoKTtcbiAgICAgIGFwcGx5U2hpbUludGVyZmFjZS5zdHlsZURvY3VtZW50KHByb3BlcnRpZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgWydnZXRDb21wdXRlZFN0eWxlVmFsdWUnXShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gICAgfSxcbiAgICBbJ25hdGl2ZUNzcyddOiB0cnVlLFxuICAgIFsnbmF0aXZlU2hhZG93J106IHRydWVcbiAgfTtcblxuICBpZiAoQ3VzdG9tU3R5bGVJbnRlcmZhY2UpIHtcbiAgICB3aW5kb3dbJ1NoYWR5Q1NTJ11bJ0N1c3RvbVN0eWxlSW50ZXJmYWNlJ10gPSBDdXN0b21TdHlsZUludGVyZmFjZTtcbiAgfVxufVxuXG53aW5kb3dbJ1NoYWR5Q1NTJ11bJ0FwcGx5U2hpbSddID0gYXBwbHlTaGltOyJdLCJuYW1lcyI6WyJBcHBseVNoaW1VdGlscy5lbGVtZW50c0FyZUludmFsaWQiLCJBcHBseVNoaW1VdGlscy50ZW1wbGF0ZUlzVmFsaWQiLCJBcHBseVNoaW1VdGlscy50ZW1wbGF0ZUlzVmFsaWRhdGluZyIsIkFwcGx5U2hpbVV0aWxzLnN0YXJ0VmFsaWRhdGluZ1RlbXBsYXRlIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7Ozs7OztBQVVBLEFBRUEsQUFBTyxJQUFJLFlBQVksR0FBRyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzs7O0FBRy9FLEFBQU8sSUFBSSxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0FBQzlFLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7Ozs7O0FBSzlFLFNBQVMsYUFBYSxDQUFDLFFBQVEsRUFBRTtFQUMvQixJQUFJLFFBQVEsRUFBRTtJQUNaLGtCQUFrQixHQUFHLGtCQUFrQixJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDMUUsWUFBWSxHQUFHLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUN4RDtDQUNGOztBQUVELElBQUksTUFB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"}