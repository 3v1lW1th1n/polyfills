{"version":3,"sources":["src/custom-style-interface.js","entrypoints/custom-style-interface.js"],"names":["readyPromise","whenReady","window","transformFn","validateFn","constructor","CustomStyleInterface","enqueueDocumentValidation","resolveFn","Promise","resolve","document","readyState","addEventListener","then","addCustomStyle","style","push","getStyleForCustomStyle","customStyle","findStyles","cs","i","length","appliedStyle","attributes","attr","setAttribute","name","value","prototype","Object","defineProperties","get","set","fn"],"mappings":"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","file":"custom-style-interface.min.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @typedef {HTMLStyleElement | ({getStyle: (function():HTMLStyleElement)})}\n */\nlet CustomStyleProvider; // eslint-disable-line no-unused-vars\n\nconst PROCESSED_MARKER = '__processedByShadyCSS';\nconst SEEN_MARKER = '__seenByShadyCSS';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    if (whenReady) {\n      whenReady(validateFn);\n    } else {\n      if (!readyPromise) {\n        /** @type {!function()} */\n        let resolveFn = function(){};\n        readyPromise = new Promise((resolve) => {resolveFn = resolve});\n        if (document.readyState === 'complete') {\n          resolveFn();\n        } else {\n          document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'complete') {\n              resolveFn();\n            }\n          });\n        }\n      }\n      readyPromise.then(validateFn);\n    }\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  findStyles() {\n    let cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      let customStyle = cs[i];\n      if (customStyle[PROCESSED_MARKER]) {\n        continue;\n      }\n      let style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        customStyle[PROCESSED_MARKER] = true;\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        let appliedStyle = /** @type {HTMLStyleElement} */(style['__appliedElement']);\n        if (appliedStyle) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            appliedStyle.setAttribute(attr.name, attr.value);\n          }\n        }\n        if (transformFn) {\n          transformFn(appliedStyle || style);\n        }\n      }\n    }\n  }\n}\n\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['findStyles'] = CustomStyleInterface.prototype.findStyles;\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /** @param {?function()} fn */\n    set(fn) {\n      validateFn = fn;\n    },\n  }\n})","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport CustomStyleInterface from '../src/custom-style-interface'\n\nwindow['CustomStyleInterface'] = new CustomStyleInterface();"]}