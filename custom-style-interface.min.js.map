{"version":3,"sources":["src/common-utils.js","src/document-wait.js","src/custom-style-interface.js","entrypoints/custom-style-interface.js"],"names":["updateNativeProperties$$module$$src$common_utils","updateNativeProperties","element","properties","p","style","removeProperty","setProperty","readyPromise","whenReady","window","resolveFn","documentWait$$module$$src$document_wait","documentWait","callback","Promise","resolve","document","readyState","addEventListener","then","transformFn","validateFn","constructor","CustomStyleInterface","enqueueDocumentValidation","addCustomStyle","push","getStyleForCustomStyle","customStyle","findStyles","cs","i","length","appliedStyle","attributes","attr","setAttribute","name","value","prototype","Object","defineProperties","get","set","fn","customStyleInterface","ShadyCSS","prepareTemplate","styleSubtree","styleElement","styleDocument","documentElement","getComputedStyleValue","property","getComputedStyle","getPropertyValue","trim","nativeCss","nativeShadow"],"mappings":"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","file":"custom-style-interface.min.js","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  return window.getComputedStyle(element).getPropertyValue(property).trim();\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {function()} callback\n */\nexport default function documentWait(callback) {\n  if (whenReady) {\n    whenReady(callback)\n  } else {\n    if (!readyPromise) {\n      readyPromise = new Promise((resolve) => {resolveFn = resolve});\n      if (document.readyState === 'complete') {\n        resolveFn();\n      } else {\n        document.addEventListener('readystatechange', () => {\n          if (document.readyState === 'complete') {\n            resolveFn();\n          }\n        });\n      }\n    }\n    readyPromise.then(callback);\n  }\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport documentWait from './document-wait'\n\n/**\n * @typedef {HTMLStyleElement | ({getStyle: (function():HTMLStyleElement)})}\n */\nexport let CustomStyleProvider;\n\nconst PROCESSED_MARKER = '__processedByShadyCSS';\nconst SEEN_MARKER = '__seenByShadyCSS';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued']) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(() => {\n      validateFn();\n    });\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  findStyles() {\n    let cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      let customStyle = cs[i];\n      if (customStyle[PROCESSED_MARKER]) {\n        continue;\n      }\n      let style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        customStyle[PROCESSED_MARKER] = true;\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        let appliedStyle = /** @type {HTMLStyleElement} */(style['__appliedElement']);\n        if (appliedStyle) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            appliedStyle.setAttribute(attr.name, attr.value);\n          }\n        }\n        if (transformFn) {\n          transformFn(appliedStyle || style);\n        }\n      }\n    }\n  }\n}\n\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['findStyles'] = CustomStyleInterface.prototype.findStyles;\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /** @param {?function()} fn */\n    set(fn) {\n      validateFn = fn;\n    },\n  }\n})\n\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\nexport let CustomStyleInterfaceInterface;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport CustomStyleInterface from '../src/custom-style-interface'\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils'\n\nconst customStyleInterface = new CustomStyleInterface();\n\nif (!window.ShadyCSS) {\n  window.ShadyCSS = {\n    /**\n     * @param {HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {Element} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      customStyleInterface.findStyles();\n      updateNativeProperties(element, properties);\n    },\n\n    /**\n     * @param {Element} element\n     */\n    styleElement(element) { // eslint-disable-line no-unused-vars\n      customStyleInterface.findStyles();\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      customStyleInterface.findStyles();\n      updateNativeProperties(document.documentElement, properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n    nativeCss: true,\n    nativeShadow: true\n  }\n}\n\nwindow.ShadyCSS.CustomStyleInterface = customStyleInterface;"]}