{"version":3,"file":"custom-style-interface.min.js","sources":["../src/document-wait.js","../src/custom-style-interface.js","../src/common-utils.js","custom-style-interface.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {function()} callback\n */\nexport default function documentWait(callback) {\n  if (whenReady) {\n    whenReady(callback)\n  } else {\n    if (!readyPromise) {\n      readyPromise = new Promise((resolve) => {resolveFn = resolve});\n      if (document.readyState === 'complete') {\n        resolveFn();\n      } else {\n        document.addEventListener('readystatechange', () => {\n          if (document.readyState === 'complete') {\n            resolveFn();\n          }\n        });\n      }\n    }\n    readyPromise.then(callback);\n  }\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport documentWait from './document-wait'\n\n/**\n * @typedef {HTMLStyleElement | ({getStyle: (function():HTMLStyleElement)})}\n */\nlet CustomStyleProvider; // eslint-disable-line no-unused-vars\n\nconst PROCESSED_MARKER = '__processedByShadyCSS';\nconst SEEN_MARKER = '__seenByShadyCSS';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued']) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(() => {\n      validateFn();\n    });\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  findStyles() {\n    let cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      let customStyle = cs[i];\n      if (customStyle[PROCESSED_MARKER]) {\n        continue;\n      }\n      let style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        customStyle[PROCESSED_MARKER] = true;\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        let appliedStyle = /** @type {HTMLStyleElement} */(style['__appliedElement']);\n        if (appliedStyle) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            appliedStyle.setAttribute(attr.name, attr.value);\n          }\n        }\n        if (transformFn) {\n          transformFn(appliedStyle || style);\n        }\n      }\n    }\n  }\n}\n\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['findStyles'] = CustomStyleInterface.prototype.findStyles;\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /** @param {?function()} fn */\n    set(fn) {\n      validateFn = fn;\n    },\n  }\n})","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  return window.getComputedStyle(element).getPropertyValue(property).trim();\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport CustomStyleInterface from '../src/custom-style-interface'\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils'\n\nconst customStyleInterface = new CustomStyleInterface();\n\nif (!window['ShadyCSS']) {\n  window['ShadyCSS'] = {\n    /**\n     * @param {HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    ['prepareTemplate'](template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {Element} element\n     * @param {Object=} properties\n     */\n    ['styleSubtree'](element, properties) {\n      customStyleInterface.findStyles();\n      updateNativeProperties(element, properties);\n    },\n\n    /**\n     * @param {Element} element\n     */\n    ['styleElement'](element) { // eslint-disable-line no-unused-vars\n      customStyleInterface.findStyles();\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    ['styleDocument'](properties) {\n      customStyleInterface.findStyles();\n      updateNativeProperties(document.documentElement, properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    ['getComputedStyleValue'](element, property) {\n      return getComputedStyleValue(element, property);\n    },\n    ['nativeCss']: true,\n    ['nativeShadow']: true\n  }\n}\n\nwindow['ShadyCSS']['CustomStyleInterface'] = customStyleInterface;"],"names":[],"mappings":";;;AAAA;;;;;;;;;;AAUA,AAEA;AACA,IAAI,YAAY,GAAG,IAAI,CAAC;;;AAGxB,IAAI,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC;;;AAGpF,IAAI,SAAS,CAAC;;;;;AAKd,AAAe,SAAS,YAAY,CAAC,QAAQ,EAAE;EAC7C,IAAI,SAAS,EAAE;IACb,SAAS,CAAC,QAAQ,CAAC,CAAA;GACpB,MAAM;IACL,IAAI,CAAC,YAAY,EAAE;MACjB,YAAY,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC,SAAS,GAAG,OAAO,CAAA,CAAC,CAAC,CAAC;MAC/D,IAAI,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;QACtC,SAAS,EAAE,CAAC;OACb,MAAM;QACL,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;UAClD,IAAI,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;YACtC,SAAS,EAAE,CAAC;WACb;SACF,CAAC,CAAC;OACJ;KACF;IACD,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GAC7B;;;ACzCH;;;;;;;;;;AAUA,AAEA,AAEA,AAKA,MAAM,gBAAgB,GAAG,uBAAuB,CAAC;AACjD,MAAM,WAAW,GAAG,kBAAkB,CAAC;;;AAGvC,IAAI,WAAW,GAAG,IAAI,CAAC;;;AAGvB,IAAI,UAAU,GAAG,IAAI,CAAC;;;;;;;;;;;;;;;;AAgBtB,AAAe,MAAM,oBAAoB,CAAC;EACxC,WAAW,GAAG;;IAEZ,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;IAC1B,IAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;GAC1B;;;;EAID,yBAAyB,GAAG;IAC1B,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;MACpB,OAAO;KACR;IACD,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;IACxB,YAAY,CAAC,MAAM;MACjB,UAAU,EAAE,CAAC;KACd,CAAC,CAAC;GACJ;;;;EAID,cAAc,CAAC,KAAK,EAAE;IACpB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;MACvB,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;MAC1B,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACjC,IAAI,CAAC,yBAAyB,EAAE,CAAC;KAClC;GACF;;;;;EAKD,sBAAsB,CAAC,WAAW,EAAE;IAClC,IAAI,KAAK,CAAC;IACV,IAAI,WAAW,CAAC,UAAU,CAAC,EAAE;MAC3B,KAAK,GAAG,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;KACnC,MAAM;MACL,KAAK,GAAG,WAAW,CAAC;KACrB;IACD,OAAO,KAAK,CAAC;GACd;EACD,UAAU,GAAG;IACX,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MAClC,IAAI,WAAW,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;MACxB,IAAI,WAAW,CAAC,gBAAgB,CAAC,EAAE;QACjC,SAAS;OACV;MACD,IAAI,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;MACrD,IAAI,KAAK,EAAE;QACT,WAAW,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC;;;;QAIrC,IAAI,YAAY,mCAAmC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC9E,IAAI,YAAY,EAAE;UAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/B,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;WAClD;SACF;QACD,IAAI,WAAW,EAAE;UACf,WAAW,CAAC,YAAY,IAAI,KAAK,CAAC,CAAC;SACpC;OACF;KACF;GACF;CACF;;AAED,oBAAoB,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,cAAc,CAAC;AACjG,oBAAoB,CAAC,SAAS,CAAC,wBAAwB,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,sBAAsB,CAAC;AACjH,oBAAoB,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,UAAU,CAAC;;AAEzF,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,SAAS,EAAE;EACtD,mBAAmB,EAAE;;IAEnB,GAAG,GAAG;MACJ,OAAO,WAAW,CAAC;KACpB;;IAED,GAAG,CAAC,EAAE,EAAE;MACN,WAAW,GAAG,EAAE,CAAC;KAClB;GACF;EACD,kBAAkB,EAAE;;IAElB,GAAG,GAAG;MACJ,OAAO,UAAU,CAAC;KACnB;;IAED,GAAG,CAAC,EAAE,EAAE;MACN,UAAU,GAAG,EAAE,CAAC;KACjB;GACF;CACF,CAAC;;ACxIF;;;;;;;;;;AAUA,AAEA;;;;AAIA,AAAO,SAAS,sBAAsB,CAAC,OAAO,EAAE,UAAU,EAAE;;EAE1D,KAAK,IAAI,CAAC,IAAI,UAAU,EAAE;;IAExB,IAAI,CAAC,KAAK,IAAI,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;KACjC,MAAM;MACL,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7C;GACF;CACF;;;;;;;AAOD,AAAO,SAAS,qBAAqB,CAAC,OAAO,EAAE,QAAQ,EAAE;EACvD,OAAO,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC;;;AClC5E;;;;;;;;;;AAUA,AAEA,AACA,AAEA,MAAM,oBAAoB,GAAG,IAAI,oBAAoB,EAAE,CAAC;;AAExD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;EACvB,MAAM,CAAC,UAAU,CAAC,GAAG;;;;;;IAMnB,CAAC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,EAAE;;;;;;IAM7D,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE;MACpC,oBAAoB,CAAC,UAAU,EAAE,CAAC;MAClC,sBAAsB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;KAC7C;;;;;IAKD,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE;MACxB,oBAAoB,CAAC,UAAU,EAAE,CAAC;KACnC;;;;;IAKD,CAAC,eAAe,CAAC,CAAC,UAAU,EAAE;MAC5B,oBAAoB,CAAC,UAAU,EAAE,CAAC;MAClC,sBAAsB,CAAC,QAAQ,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;KAC9D;;;;;;;IAOD,CAAC,uBAAuB,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE;MAC3C,OAAO,qBAAqB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;KACjD;IACD,CAAC,WAAW,GAAG,IAAI;IACnB,CAAC,cAAc,GAAG,IAAI;GACvB,CAAA;CACF;;AAED,MAAM,CAAC,UAAU,CAAC,CAAC,sBAAsB,CAAC,GAAG,oBAAoB,;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}