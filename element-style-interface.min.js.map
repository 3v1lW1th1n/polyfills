{"version":3,"sources":["src/template-map.js","src/apply-shim-utils.js","src/style-settings.js","src/element-style-interface.js","src/style-util.js","entrypoints/element-style-interface.js"],"names":["$jscompDefaultExport","promise","Promise","resolve","invalidate$$module$$src$apply_shim_utils","invalidate","elementName","template","_applyShimInvalid","startValidatingTemplate$$module$$src$apply_shim_utils","startValidatingTemplate","_validating","then","constructor","ApplyShimShim","ensure","impl","window","transformCustomStyle","style","navigator","userAgent","match","CSS","supports","ScopingShim","ApplyShim","CustomStyleInterface","updateNativeProperties$$module$$src$element_style_interface","updateNativeProperties","element","properties","p","removeProperty","setProperty","ShadyInterface","prepareTemplate","elementExtends","flushCustomStyles","styleSubtree","styleElement","styleDocument","ApplyInterface","applyShim","styles","i","length","cs","shadowRoot","shadowChildren","children","childNodes","is","getAttribute","localName","root","querySelector","document","documentElement","CustomOnlyInterface","styleInterface","ElementStyleInterface","getComputedStyleValue","property","getComputedStyle","getPropertyValue","trim","prototype"],"mappings":"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","file":"element-style-interface.min.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport default {};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map'\nimport {StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\n\n/**\n * @const {Promise}\n */\nconst promise = Promise.resolve();\n\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\nexport function invalidateTemplate(template) {\n  template._applyShimInvalid = true;\n}\n\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\nexport function templateIsValid(template) {\n  return !template._applyShimInvalid;\n}\n\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\nexport function templateIsValidating(template) {\n  return template._validating;\n}\n\n/*\nthe template is marked as `validating` for one microtask so that all instances\nfound in the tree crawl of `applyStyle` will update themselves,\nbut the template will only be updated once.\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\nexport function startValidatingTemplate(template) {\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      template._applyShimInvalid = false;\n      template._validating = false;\n    });\n  }\n}\n\nexport class ApplyShimShim {\n  constructor() {\n    /** @type {Object} */\n    this.impl;\n  }\n  ensure() {\n    if (!this.impl) {\n      this.impl = window['ApplyShim'] || {\n        ['detectMixin'](){return false},\n        ['transformRule'](){},\n        ['transformRules'](){},\n        ['transformTemplate'](){},\n        ['transformCustomStyle'](){},\n        ['transformStyle'](){}\n      };\n      this.impl['invalidCallback'] = invalidate;\n    }\n  }\n  /**\n   * @param {string} text\n   * @return {boolean}\n   */\n  detectMixin(text) {\n    this.ensure();\n    return this.impl['detectMixin'](text);\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {string=} elementName\n   */\n  transformRules(ast, elementName) {\n    this.ensure();\n    return this.impl['transformRules'](ast, elementName);\n  }\n  /**\n   * @param {StyleNode} ast\n   */\n  transformRule(ast) {\n    this.ensure();\n    this.impl['transformRule'](ast);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string=} elementName\n   */\n  transformStyle(style, elementName = '') {\n    this.ensure();\n    this.impl['transformStyle'](style, elementName);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  transformCustomStyle(style) {\n    this.ensure();\n    this.impl['transformCustomStyle'](style);\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  transformTemplate(template, elementName) {\n    this.ensure();\n    this.impl['transformTemplate'](template, elementName);\n  }\n}","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nexport let nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n/**\n * @param {?Object} settings\n */\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings['shimcssproperties'];\n    nativeShadow = nativeShadow && !settings['shimshadow'];\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window['ShadyCSS']);\n} else if (window.WebComponents) {\n  parseSettings(window['WebComponents']['flags']);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport templateMap from './template-map'\nimport {getIsExtends} from './style-util'\nimport * as ApplyShimUtils from './apply-shim-utils'\n\nconst ScopingShim = window['ScopingShim'];\nconst ApplyShim = window['ApplyShim'];\nconst CustomStyleInterface = window['CustomStyleInterface'];\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nfunction updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @typedef {{\n *   prepareTemplate: function(HTMLTemplateElement, string, string=),\n *   flushCustomStyles: function(),\n *   styleSubtree: function(HTMLElement, Object=),\n *   styleElement: function(HTMLElement),\n *   styleDocument: function(Object=)\n * }}\n */\nlet StylingInterface; // eslint-disable-line no-unused-vars\n\n/** @implements {StylingInterface} */\nclass ShadyInterface {\n  prepareTemplate(template, elementName, elementExtends) {\n    ScopingShim['prepareTemplate'](template, elementName, elementExtends);\n  }\n  flushCustomStyles() {\n    ScopingShim['flushCustomStyles']();\n  }\n  styleSubtree(element, properties) {\n    ScopingShim['applySubtreeStyle'](element, properties);\n  }\n  styleElement(element) {\n    ScopingShim['applyElementStyle'](element);\n  }\n  styleDocument(properties) {\n    ScopingShim['updateStyles'](properties);\n  }\n}\n\n/** @implements {StylingInterface} */\nclass ApplyInterface {\n  constructor() {\n    this.applyShim = new ApplyShimUtils.ApplyShimShim();\n    if (CustomStyleInterface) {\n      CustomStyleInterface['transformCallback'] = (style) => {\n        this.applyShim.transformCustomStyle(style);\n      };\n      CustomStyleInterface['validateCallback'] = () => {\n        this.flushCustomStyles();\n      }\n    }\n  }\n  prepareTemplate(template, elementName) {\n    templateMap[elementName] = template;\n    this.applyShim.transformTemplate(template, elementName);\n  }\n  flushCustomStyles() {\n    if (CustomStyleInterface) {\n      CustomStyleInterface['findStyles']();\n      let styles = CustomStyleInterface['customStyles'];\n      for (let i = 0; i < styles.length; i++ ) {\n        let cs = styles[i];\n        let style = CustomStyleInterface['getStyleForCustomStyle'](cs);\n        if (style) {\n          this.applyShim.transformCustomStyle(style);\n        }\n      }\n      CustomStyleInterface['enqueued'] = false;\n    }\n  }\n  styleSubtree(element, properties) {\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren = element.shadowRoot.children || element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(shadowChildren[i]);\n      }\n    }\n    let children = element.children || element.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      this.styleSubtree(children[i]);\n    }\n  }\n  styleElement(element) {\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update all instances\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          this.applyShim.transformStyle(style, is);\n        }\n      }\n    }\n  }\n  styleDocument(properties) {\n    this.styleSubtree(document.documentElement, properties);\n  }\n}\n\n/** @implements {StylingInterface} */\nclass CustomOnlyInterface {\n  constructor() {\n    CustomStyleInterface['validateCallback'] = this.flushCustomStyles;\n  }\n  prepareTemplate() {}\n  flushCustomStyles() {\n    CustomStyleInterface['findStyles']();\n    CustomStyleInterface['enqueued'] = false;\n  }\n  styleSubtree(element, properties) {\n    updateNativeProperties(element, properties);\n  }\n  styleElement(element) {} // eslint-disable-line no-unused-vars\n  styleDocument(properties) {\n    updateNativeProperties(document.documentElement, properties);\n  }\n}\n\n/** @type {StylingInterface} */\nlet styleInterface;\n\nif (ScopingShim) {\n  styleInterface = new ShadyInterface();\n} else if (ApplyShim) {\n  styleInterface = new ApplyInterface();\n} else {\n  styleInterface = new CustomOnlyInterface();\n}\n\nclass ElementStyleInterface {\n  /**\n   * @param {HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    styleInterface.prepareTemplate(template, elementName, elementExtends)\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    styleInterface.flushCustomStyles();\n    styleInterface.styleSubtree(element, properties);\n  }\n\n  /**\n   * @param {Element} element\n   */\n  styleElement(element) {\n    styleInterface.flushCustomStyles();\n    styleInterface.styleElement(element);\n  }\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    styleInterface.flushCustomStyles();\n    styleInterface.styleDocument(properties);\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    if (ScopingShim) {\n      return ScopingShim['getComputedStyleValue'](element, property);\n    } else {\n      return window.getComputedStyle(element).getPropertyValue(property).trim();\n    }\n  }\n}\n\nElementStyleInterface.prototype['prepareTemplate'] = ElementStyleInterface.prototype.prepareTemplate;\nElementStyleInterface.prototype['styleSubtree'] = ElementStyleInterface.prototype.styleSubtree\nElementStyleInterface.prototype['styleElement'] = ElementStyleInterface.prototype.styleElement\nElementStyleInterface.prototype['styleDocument'] = ElementStyleInterface.prototype.styleDocument\nElementStyleInterface.prototype['getComputedStyleValue'] = ElementStyleInterface.prototype.getComputedStyleValue\n\nexport default ElementStyleInterface","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport {parse, stringify, types, StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n */\nexport function toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'];\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\n/**\n * @param {Node} style\n * @param {?Node} target\n * @param {?Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return /** @type {HTMLStyleElement} */(target.insertBefore(style, after));\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {Element}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/** @type {Node} */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {Node}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * @param {Element} element\n * @return {?string}\n */\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window['ShadyDOM']) {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\n/**\n * @param {Element|Object} element\n * @return {{is: string, extends: string}}\n */\nexport function getIsExtends(element) {\n  let is = element.is || (element.getAttribute && element.getAttribute('is')) || element.localName;\n  let extendz = element.extends || element.localName !== is ? element.localName : '';\n  return {is, extends: extendz};\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport ElementStyleInterface from '../src/element-style-interface'\n\nwindow['ElementStyleInterface'] = new ElementStyleInterface();"]}