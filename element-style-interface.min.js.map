{"version":3,"file":"element-style-interface.min.js","sources":["../src/template-map.js","../src/style-settings.js","../src/css-parse.js","../src/common-regex.js","../src/style-util.js","../src/apply-shim-utils.js","../src/element-style-interface.js","element-style-interface.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport default {};\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nexport let nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n/**\n * @param {?Object} settings\n */\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings['shimcssproperties'];\n    nativeShadow = nativeShadow && !settings['shimshadow'];\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window['ShadyCSS']);\n} else if (window.WebComponents) {\n  parseSettings(window['WebComponents']['flags']);\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media[^(]*(\\([^)]*\\))/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport {parse, stringify, types, StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n */\nexport function toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'];\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\n/**\n * @param {Node} style\n * @param {?Node} target\n * @param {?Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return /** @type {HTMLStyleElement} */(target.insertBefore(style, after));\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {Element}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/** @type {Node} */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {Node}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * @param {Element} element\n * @return {?string}\n */\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window['ShadyDOM']) {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\n/**\n * @param {Element|Object} element\n * @return {{is: string, extends: string}}\n */\nexport function getIsExtends(element) {\n  let is = element.is || (element.getAttribute && element.getAttribute('is')) || element.localName;\n  let extendz = element.extends || element.localName !== is ? element.localName : '';\n  return {is, extends: extendz};\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map'\nimport {StyleNode} from './css-parse' // eslint-disable-line no-unused-vars\n\n/**\n * @const {Promise}\n */\nconst promise = Promise.resolve();\n\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\nexport function invalidateTemplate(template) {\n  template._applyShimInvalid = true;\n}\n\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\nexport function templateIsValid(template) {\n  return !template._applyShimInvalid;\n}\n\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\nexport function templateIsValidating(template) {\n  return template._validating;\n}\n\n/*\nthe template is marked as `validating` for one microtask so that all instances\nfound in the tree crawl of `applyStyle` will update themselves,\nbut the template will only be updated once.\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\nexport function startValidatingTemplate(template) {\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      template._applyShimInvalid = false;\n      template._validating = false;\n    });\n  }\n}\n\nexport class ApplyShimShim {\n  constructor() {\n    /** @type {Object} */\n    this.impl;\n  }\n  ensure() {\n    if (!this.impl) {\n      this.impl = window['ApplyShim'] || {\n        ['detectMixin'](){return false},\n        ['transformRule'](){},\n        ['transformRules'](){},\n        ['transformTemplate'](){},\n        ['transformCustomStyle'](){},\n        ['transformStyle'](){}\n      };\n      this.impl['invalidCallback'] = invalidate;\n    }\n  }\n  /**\n   * @param {string} text\n   * @return {boolean}\n   */\n  detectMixin(text) {\n    this.ensure();\n    return this.impl['detectMixin'](text);\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {string=} elementName\n   */\n  transformRules(ast, elementName) {\n    this.ensure();\n    return this.impl['transformRules'](ast, elementName);\n  }\n  /**\n   * @param {StyleNode} ast\n   */\n  transformRule(ast) {\n    this.ensure();\n    this.impl['transformRule'](ast);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string=} elementName\n   */\n  transformStyle(style, elementName = '') {\n    this.ensure();\n    this.impl['transformStyle'](style, elementName);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  transformCustomStyle(style) {\n    this.ensure();\n    this.impl['transformCustomStyle'](style);\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  transformTemplate(template, elementName) {\n    this.ensure();\n    this.impl['transformTemplate'](template, elementName);\n  }\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport templateMap from './template-map'\nimport {getIsExtends} from './style-util'\nimport * as ApplyShimUtils from './apply-shim-utils'\n\nlet ScopingShim;\nlet ApplyShim;\nlet CustomStyleInterface;\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nfunction updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @typedef {{\n *   prepareTemplate: function(HTMLTemplateElement, string, string=),\n *   flushCustomStyles: function(),\n *   styleSubtree: function(HTMLElement, Object=),\n *   styleElement: function(HTMLElement),\n *   styleDocument: function(Object=)\n * }}\n */\nlet StylingInterface; // eslint-disable-line no-unused-vars\n\n/** @implements {StylingInterface} */\nclass ShadyInterface {\n  prepareTemplate(template, elementName, elementExtends) {\n    ScopingShim['prepareTemplate'](template, elementName, elementExtends);\n  }\n  flushCustomStyles() {\n    ScopingShim['flushCustomStyles']();\n  }\n  styleSubtree(element, properties) {\n    ScopingShim['applySubtreeStyle'](element, properties);\n  }\n  styleElement(element) {\n    ScopingShim['applyElementStyle'](element);\n  }\n  styleDocument(properties) {\n    ScopingShim['updateStyles'](properties);\n  }\n}\n\n/** @implements {StylingInterface} */\nclass ApplyInterface {\n  constructor() {\n    this.applyShim = new ApplyShimUtils.ApplyShimShim();\n    this.customStyleInterface = null;\n    this.booted = false;\n  }\n  ensure() {\n    if (this.booted) {\n      return;\n    }\n    this.customStyleInterface = window['CustomStyleInterface'];\n    if (this.customStyleInterface) {\n      this.customStyleInterface['transformCallback'] = (style) => {\n        this.applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        this.flushCustomStyles();\n      }\n    }\n    this.booted = true;\n  }\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    templateMap[elementName] = template;\n    this.applyShim.transformTemplate(template, elementName);\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (this.customStyleInterface) {\n      this.customStyleInterface['findStyles']();\n      let styles = this.customStyleInterface['customStyles'];\n      for (let i = 0; i < styles.length; i++ ) {\n        let cs = styles[i];\n        let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n        if (style) {\n          this.applyShim.transformCustomStyle(style);\n        }\n      }\n      this.customStyleInterface['enqueued'] = false;\n    }\n  }\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren = element.shadowRoot.children || element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(shadowChildren[i]);\n      }\n    }\n    let children = element.children || element.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      this.styleSubtree(children[i]);\n    }\n  }\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update all instances\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          this.applyShim.transformStyle(style, is);\n        }\n      }\n    }\n  }\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.documentElement, properties);\n  }\n}\n\n/** @implements {StylingInterface} */\nclass CustomOnlyInterface {\n  constructor() {\n    CustomStyleInterface['validateCallback'] = this.flushCustomStyles;\n  }\n  prepareTemplate() {}\n  flushCustomStyles() {\n    CustomStyleInterface['findStyles']();\n    CustomStyleInterface['enqueued'] = false;\n  }\n  styleSubtree(element, properties) {\n    updateNativeProperties(element, properties);\n  }\n  styleElement(element) {} // eslint-disable-line no-unused-vars\n  styleDocument(properties) {\n    updateNativeProperties(document.documentElement, properties);\n  }\n}\n\nexport default class ElementStyleInterface {\n  constructor() {\n    /** @type {StylingInterface} */\n    this.styleInterface = null;\n  }\n  ensure() {\n    if (this.styleInterface) {\n      return;\n    }\n    ScopingShim = window['ScopingShim'];\n    ApplyShim = window['ApplyShim'];\n    CustomStyleInterface = window['CustomStyleInterface'];\n    if (ScopingShim) {\n      this.styleInterface = new ShadyInterface();\n    } else if (ApplyShim) {\n      this.styleInterface = new ApplyInterface();\n    } else if (CustomStyleInterface) {\n      this.styleInterface = new CustomOnlyInterface();\n    }\n  }\n  /**\n   * @param {HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    this.ensure();\n    if (this.styleInterface) {\n      this.styleInterface.prepareTemplate(template, elementName, elementExtends)\n    }\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (this.styleInterface) {\n      this.styleInterface.flushCustomStyles();\n      this.styleInterface.styleSubtree(element, properties);\n    }\n  }\n\n  /**\n   * @param {Element} element\n   */\n  styleElement(element) {\n    this.ensure();\n    if (this.styleInterface) {\n      this.styleInterface.flushCustomStyles();\n      this.styleInterface.styleElement(element);\n    }\n  }\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    if (this.styleInterface) {\n      this.styleInterface.flushCustomStyles();\n      this.styleInterface.styleDocument(properties);\n    }\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    if (ScopingShim) {\n      return ScopingShim['getComputedStyleValue'](element, property);\n    } else {\n      return window.getComputedStyle(element).getPropertyValue(property).trim();\n    }\n  }\n}\n\nElementStyleInterface.prototype['prepareTemplate'] = ElementStyleInterface.prototype.prepareTemplate;\nElementStyleInterface.prototype['styleSubtree'] = ElementStyleInterface.prototype.styleSubtree;\nElementStyleInterface.prototype['styleElement'] = ElementStyleInterface.prototype.styleElement;\nElementStyleInterface.prototype['styleDocument'] = ElementStyleInterface.prototype.styleDocument;\nElementStyleInterface.prototype['getComputedStyleValue'] = ElementStyleInterface.prototype.getComputedStyleValue;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport ElementStyleInterface from '../src/element-style-interface'\n\nwindow['ElementStyleInterface'] = new ElementStyleInterface();"],"names":["ApplyShimUtils.ApplyShimShim","ApplyShimUtils.templateIsValid","ApplyShimUtils.templateIsValidating","ApplyShimUtils.startValidatingTemplate"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}