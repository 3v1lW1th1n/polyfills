{"version":3,"sources":["src/css-parse.js"," [synthetic:util/global] ","src/style-settings.js","src/common-regex.js","src/unscoped-style-handler.js","src/style-util.js","src/style-transformer.js","src/scoping-shim.js","src/document-watcher.js","src/style-properties.js","src/style-info.js","src/style-placeholder.js","src/style-cache.js","src/template-map.js","src/apply-shim-utils.js","src/common-utils.js","entrypoints/scoping-shim.js"],"names":["$jscomp.global","constructor","StyleNode","parse","text","replace","RX$$module$src$css_parse.comments","RX$$module$src$css_parse.port","parseCss","root","length","n","i","l","OPEN_BRACE","p","previous","push","CLOSE_BRACE","node","t","substring","trim","ss","_expandUnicodeEscapes","RX$$module$src$css_parse.multipleSpaces","lastIndexOf","s","indexOf","AT_START","MEDIA_START","types$$module$src$css_parse.MEDIA_RULE","match","RX$$module$src$css_parse.keyframesRule","types$$module$src$css_parse.KEYFRAMES_RULE","split","pop","VAR_START","types$$module$src$css_parse.MIXIN_RULE","types$$module$src$css_parse.STYLE_RULE","r$","r","code","repeat","stringify","preserveProperties","cssText","rules","RX$$module$src$css_parse.customProp","RX$$module$src$css_parse.mixinProp","RX$$module$src$css_parse.mixinApply","RX$$module$src$css_parse.varApply","STYLE_RULE","KEYFRAMES_RULE","MEDIA_RULE","MIXIN_RULE","comments","port","customProp","mixinProp","mixinApply","varApply","keyframesRule","multipleSpaces","nativeShadow","window","nativeCssVariables_","calcCssVariables","settings","navigator","userAgent","CSS","supports","cssBuild","ShadyCSS","undefined","disableRuntime","nativeCss","nativeCssVariables","module$src$style_settings.cssBuild","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","MEDIA_MATCH","BRACKETED","styleTextSet","Set","toCssText","callback","forEachRule","rulesForStyle","style","textContent","isKeyframesSelector","rule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","matchMedia","matches","applyCss","moniker","target","contextNode","document","createElement","setAttribute","applyStyle","lastHeadApplyNode","applyStylePlaceHolder","placeHolder","createComment","scope","head","insertBefore","after","firstChild","nextSibling","compareDocumentPosition","position","Node","DOCUMENT_POSITION_PRECEDING","findMatchingParen","start","level","processVariableAndFallback","str","end","inner","prefix","suffix","comma","value","fallback","setElementClassRaw","element","call","wrap","getIsExtends","localName","typeExtension","is","getAttribute","extends","splitSelectorList","selector","parts","part","slice","getCssBuild","__cssBuild","attrValue","CSS_BUILD_ATTR","buildComment","content","Comment","commentParts","parentNode","removeChild","isOptimalCssBuild","StyleTransformer","domAddScope","_transformDom","fn","startNode","transformer","nodeType","ELEMENT_NODE","c$","childNodes","_content","children","shouldRemoveScope","classList","remove","SCOPE_NAME","add","c","CLASS","newValue","domReplaceScope","oldScope","newScope","domRemoveScope","elementStyles","styleRules","css","ext","hostScope","_calcHostScope","CSS_CLASS_PREFIX","isScoped","transformedSelector","_transformRuleCss","self","_transformComplexSelector","p$","filter","join","COMPLEX_SELECTOR_SEP","_twiddleNthPlus","NTH","m","inside","_preserveMatchesPseudo","MATCHES","index","Error","input","MATCHES_REPLACEMENT","_replaceMatchesPseudo","reduce","acc","cur","idx","stop","isNth","test","isMatches","SLOTTED_START","SIMPLE_SELECTOR_SEP","info","_transformCompoundSelector","combinator","DIR_PAREN","before","dir","slottedIndex","SLOTTED","HOST","_transformHostSelector","_transformSimpleSelector","slotted","SLOTTED_PAREN","paren","attributes","output","PSEUDO_PREFIX","HOST_PAREN","SIMPLE_SELECTOR_PREFIX","host","typeSelector","SELECTOR_NO_MATCH","normalizeRootSelector","ROOT","_transformDocumentSelector","SCOPE_DOC_SELECTOR","$jscomp.global.Object.defineProperties","$jscompDefaultExport","StyleInfo","ast","placeholder","ownStylePropertyNames","overrideStyleProperties","customStyle","scopeSelector","styleProperties","get","set","styleInfo","_getStyleRules","prototype","matchesSelector","method","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","IS_IE","StyleProperties","decorateStyles","props","keyframes","ruleIndex","decorateRule","propertyInfo","exec","name","onKeyframesRule","_keyframes","names","properties","collectProperties","hasProperties","Object","assign","any","valueForProperty","property","valueForProperties","propertyValue","lastIndex","colon","pp","propertyDataFromStyles","o","selectorToMatch","parseInt","key","whenHostOrRootRule","parsedSelector","isRoot","isHost","hostAndRootPropertiesForScope","hostProps","rootProps","_element","transformStyles","hostSelector","hostRx","RegExp","HOST_PREFIX","rxHostSelector","HOST_SUFFIX","StyleInfo$$module$src$style_info.get","keyframeTransforms","_elementKeyframeTransforms","hasAnimations","keyframeNamesToTransform","keyframe","transform","keyframesRules","keyframesNameRx","transformedKeyframesName","scopeId","_keyframesRuleTransformer","applyCustomStyle","XSCOPE_NAME","placeholderMap","ce","origDefine","wrappedDefine","clazz","options","StyleCache","cache","store","tagname","styleElement","list","typeMax","shift","flush","scopeRegExp","getCurrentScope","getOwnerScope","ownerRoot","getRootNode","ownerDocument","handler","mxns","x","mxn","documentElement","addedNodes","currentScope","ShadowRoot","j","unscopedNodes","unscopedNode","scopeForPreviouslyUnscopedNode","observer","MutationObserver","observe","childList","subtree","delayedStart","body","requestAnimationFrame","readyState","listener","removeEventListener","addEventListener","takeRecords","module$src$document_watcher.flush","templateMap","promise","Promise","resolve","invalidate","elementName","template","templateIsValid","startValidatingTemplate","_validating","then","adoptedCssTextMap","styleCache","ScopingShim","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","StyleInfo$$module$src$style_info.set","_elementsHaveApplied","_customStyleInterface","_applyShim","?.prototype","getStyleAst","styleAstToString","prepareTemplate","prepareTemplateDom","prepareTemplateStyles","_prepared","optimalBuild","styleTextParts","styles","querySelectorAll","hasAttribute","scopingAttribute","has","newStyle","cloneNode","appendChild","_ensure","hasMixins","ownPropertyNames","shadowroot","_style","_ownPropertyNames","prepareAdoptedCssText","cssTextArray","_domPrepared","_prepareHost","_ensureCustomStyleInterface","CustomStyleInterface","transformCustomStyleForDocument","flushCustomStyles","_ensureApplyShim","ApplyShim","customStyles","_revalidateCustomStyleApplyShim","_updateProperties","_applyCustomStyles","styleDocument","overrideProps","styleElementNativeVariables","_isRootOwner","styleElementShimVariables","cacheEntry","entry","pn","cachedStyle","oldScopeSelector","cachedScopeSelector","id","applyElementStyle","shadowRoot","v","removeProperty","setProperty","querySelector","_styleOwnerForNode","owner","ownerStyleInfo","ownerProperties","create","hostAndRootProps","propertiesMatchingHost","propertyData","overrides","reify","getOwnPropertyNames","styleSubtree","wrappedHost","shadowChildren","documentRule","_transformRule","getComputedStyleValue","getComputedStyle","getPropertyValue","setElementClass","classString","classes","definitelyString","String","scopeName","classAttr","k$","_styleInfoForNode","scopeNode","unscopeNode","scopeForNode","currentScopeForNode","defineProperties","scopingShim","elementExtends"],"mappings":"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","file":"scoping-shim.min.js","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n",null,"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport const nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\nlet nativeCssVariables_;\n\n/**\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\n */\nfunction calcCssVariables(settings) {\n  if (settings && settings['shimcssproperties']) {\n    nativeCssVariables_ = false;\n  } else {\n    // chrome 49 has semi-working css vars, check if box-shadow works\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\n    // so fall back on native if we do not detect ShadyDOM\n    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/\n    nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) &&\n      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n  }\n}\n\n/** @type {string | undefined} */\nexport let cssBuild;\nif (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) {\n  cssBuild = window.ShadyCSS.cssBuild;\n}\n\n/** @type {boolean} */\nexport const disableRuntime = Boolean(window.ShadyCSS && window.ShadyCSS.disableRuntime);\n\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\n  nativeCssVariables_ = window.ShadyCSS.nativeCss;\n} else if (window.ShadyCSS) {\n  calcCssVariables(window.ShadyCSS);\n  // reset window variable to let ShadyCSS API take its place\n  window.ShadyCSS = undefined;\n} else {\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\n}\n\n// Hack for type error under new type inference which doesn't like that\n// nativeCssVariables is updated in a function and assigns the type\n// `function(): ?` instead of `boolean`.\nexport const nativeCssVariables = /** @type {boolean} */(nativeCssVariables_);","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media\\s(.*)/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {!Set<string>} */\nconst styleTextSet = new Set();\n\nexport const scopingAttribute = 'shady-unscoped';\n\n/**\n * Add a specifically-marked style to the document directly, and only one copy of that style.\n *\n * @param {!HTMLStyleElement} style\n * @return {undefined}\n */\nexport function processUnscopedStyle(style) {\n  const text = style.textContent;\n  if (!styleTextSet.has(text)) {\n    styleTextSet.add(text);\n    const newStyle = style.cloneNode(true);\n    document.head.appendChild(newStyle);\n  }\n}\n\n/**\n * Check if a style is supposed to be unscoped\n * @param {!HTMLStyleElement} style\n * @return {boolean} true if the style has the unscoping attribute\n */\nexport function isUnscopedStyle(style) {\n  return style.hasAttribute(scopingAttribute);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables, cssBuild} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\nimport {processUnscopedStyle, isUnscopedStyle} from './unscoped-style-handler.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText (rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */(document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n    target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nexport function findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  }\n}\n\n/**\n * @type {function(*):*}\n */\nexport const wrap = window['ShadyDOM'] && window['ShadyDOM']['wrap'] || ((node) => node);\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '', typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */(element).is;\n    typeExtension = /** @type {?} */(element).extends;\n  }\n  return {is, typeExtension};\n}\n\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  const styleTextParts = [];\n  const styles = /** @type {!NodeList<!HTMLStyleElement>} */(element.querySelectorAll('style'));\n  for (let i = 0; i < styles.length; i++) {\n    const style = styles[i];\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n  return styleTextParts.join('').trim();\n}\n\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\nexport function splitSelectorList(selector) {\n  const parts = [];\n  let part = '';\n  for (let i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      const end = findMatchingParen(selector, i);\n      // push the paren block into the part\n      part += selector.slice(i, end + 1);\n      // move the index to after the paren block\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  }\n  // catch any pieces after the last comma\n  if (part) {\n    parts.push(part);\n  }\n  return parts;\n}\n\nconst CSS_BUILD_ATTR = 'css-build';\n\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return /** @type {string} */(cssBuild);\n  }\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    const attrValue = element.getAttribute(CSS_BUILD_ATTR);\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      const buildComment = getBuildComment(element);\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n      element.__cssBuild = buildComment;\n    }\n  }\n  return element.__cssBuild || '';\n}\n\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\nexport function getBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  if (buildComment instanceof Comment) {\n    const commentParts = buildComment.textContent.trim().split(':');\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\nexport function isOptimalCssBuild(cssBuild = '') {\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n\n/**\n * @param {!HTMLElement} element\n */\nfunction removeBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport * as StyleUtil from './style-util.js';\nimport {nativeShadow} from './style-settings.js';\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  /**\n   * Given a node and scope name, add a scoping class to each node\n   * in the tree. This facilitates transforming css into scoped rules.\n   * @param {!Node} node\n   * @param {string} scope\n   * @param {boolean=} shouldRemoveScope\n   * @deprecated\n   */\n  dom(node, scope, shouldRemoveScope) {\n    const fn = (node) => {\n      this.element(node, scope || '', shouldRemoveScope);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * Given a node and scope name, add a scoping class to each node in the tree.\n   * @param {!Node} node\n   * @param {string} scope\n   */\n  domAddScope(node, scope) {\n    const fn = (node) => {\n      this.element(node, scope || '');\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {!Node} startNode\n   * @param {!function(!Node)} transformer\n   */\n  _transformDom(startNode, transformer) {\n    if (startNode.nodeType === Node.ELEMENT_NODE) {\n      transformer(startNode)\n    }\n    let c$;\n    if (startNode.localName === 'template') {\n      const template = /** @type {!HTMLTemplateElement} */ (startNode);\n      // In case the template is in svg context, fall back to the node\n      // since it won't be an HTMLTemplateElement with a .content property\n      c$ = (template.content || template._content || template).childNodes;\n    } else {\n      c$ = /** @type {!ParentNode} */ (startNode).children ||\n          startNode.childNodes;\n    }\n    if (c$) {\n      for (let i = 0; i < c$.length; i++) {\n        this._transformDom(c$[i], transformer);\n      }\n    }\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} scope\n   * @param {?=} shouldRemoveScope\n   */\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  /**\n   * Given a node, replace the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   * @param {string} newScope\n   */\n  domReplaceScope(node, oldScope, newScope) {\n    const fn = (node) => {\n      this.element(node, oldScope, true);\n      this.element(node, newScope);\n    };\n    this._transformDom(node, fn);\n  }\n  /**\n   * Given a node, remove the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   */\n  domRemoveScope(node, oldScope) {\n    const fn = (node) => {\n      this.element(node, oldScope || '', true);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} styleRules\n   * @param {?=} callback\n   * @param {string=} cssBuild\n   * @param {string=} cssText\n   * @return {string}\n   */\n  elementStyles(element, styleRules, callback, cssBuild = '', cssText = '') {\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    if (cssText === '') {\n      if (nativeShadow || cssBuild === 'shady') {\n        cssText = StyleUtil.toCssText(styleRules, callback);\n      } else {\n        let {is, typeExtension} = StyleUtil.getIsExtends(element);\n        cssText = this.css(styleRules, is, typeExtension, callback) + '\\n\\n';\n      }\n    }\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? `[is=${scope}]` : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  /**\n   * transforms a css rule to a scoped rule.\n   *\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule['selector'] = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = StyleUtil.splitSelectorList(rule['selector']);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.filter((part) => Boolean(part)).join(COMPLEX_SELECTOR_SEP);\n  }\n\n  /**\n   * @param {string} selector\n   * @return {string}\n   */\n  _twiddleNthPlus(selector) {\n    return selector.replace(NTH, (m, type, inside) => {\n      if (inside.indexOf('+') > -1) {\n        inside = inside.replace(/\\+/g, '___');\n      } else if (inside.indexOf('___') > -1) {\n        inside = inside.replace(/___/g, '+');\n      }\n      return `:${type}(${inside})`;\n    });\n  }\n\n  /**\n   * Preserve `:matches()` selectors by replacing them with MATCHES_REPLACMENT\n   * and returning an array of `:matches()` selectors.\n   * Use `_replacesMatchesPseudo` to replace the `:matches()` parts\n   *\n   * @param {string} selector\n   * @return {{selector: string, matches: !Array<string>}}\n   */\n  _preserveMatchesPseudo(selector) {\n    /** @type {!Array<string>} */\n    const matches = [];\n    let match;\n    while ((match = selector.match(MATCHES))) {\n      const start = match.index;\n      const end = StyleUtil.findMatchingParen(selector, start);\n      if (end === -1) {\n        throw new Error(`${match.input} selector missing ')'`)\n      }\n      const part = selector.slice(start, end + 1);\n      selector = selector.replace(part, MATCHES_REPLACEMENT);\n      matches.push(part);\n    }\n    return {selector, matches};\n  }\n\n  /**\n   * Replace MATCHES_REPLACMENT character with the given set of `:matches()`\n   * selectors.\n   *\n   * @param {string} selector\n   * @param {!Array<string>} matches\n   * @return {string}\n   */\n  _replaceMatchesPseudo(selector, matches) {\n    const parts = selector.split(MATCHES_REPLACEMENT);\n    return matches.reduce((acc, cur, idx) => acc + cur + parts[idx + 1], parts[0]);\n  }\n\n/**\n * @param {string} selector\n * @param {string} scope\n * @param {string=} hostScope\n */\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    let isNth = NTH.test(selector);\n    if (isNth) {\n      selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`)\n      selector = this._twiddleNthPlus(selector);\n    }\n    // Preserve selectors like `:-webkit-any` so that SIMPLE_SELECTOR_SEP does\n    // not get confused by spaces inside the pseudo selector\n    const isMatches = MATCHES.test(selector);\n    /** @type {!Array<string>} */\n    let matches;\n    if (isMatches) {\n      ({selector, matches} = this._preserveMatchesPseudo(selector));\n    }\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    // replace `:matches()` selectors\n    if (isMatches) {\n      selector = this._replaceMatchesPseudo(selector, matches);\n    }\n    if (isNth) {\n      selector = this._twiddleNthPlus(selector);\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir, after) =>\n      `[dir=\"${dir}\"] ${before}${after}, ${before}[dir=\"${dir}\"]${after}`);\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    const attributes = selector.split(/(\\[.+?\\])/);\n\n    const output = [];\n    for (let i = 0; i < attributes.length; i++) {\n      // Do not attempt to transform any attribute selector content\n      if ((i % 2) === 1) {\n        output.push(attributes[i]);\n      } else {\n        const part = attributes[i];\n\n        if (!(part === '' && i === attributes.length - 1)) {\n          let p$ = part.split(PSEUDO_PREFIX);\n          p$[0] += scope;\n          output.push(p$.join(PSEUDO_PREFIX));\n        }\n      }\n    }\n\n    return output.join('');\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule['selector'] = rule['parsedSelector'];\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  normalizeRootSelector(rule) {\n    if (rule['selector'] === ROOT) {\n      rule['selector'] = 'html';\n    }\n  }\n\n/**\n * @param {string} selector\n */\n  _transformDocumentSelector(selector) {\n    if (selector.match(HOST)) {\n      // remove ':host' type selectors in document rules\n      return '';\n    } else if (selector.match(SLOTTED)) {\n      return this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR)\n    } else {\n      return this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n    }\n  }\n}\n\nconst NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nconst SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nconst COMPLEX_SELECTOR_SEP = ',';\nconst SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g;\nconst SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nconst HOST = ':host';\nconst ROOT = ':root';\nconst SLOTTED = '::slotted';\nconst SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nconst HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nconst SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nconst DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)(.*)/;\nconst CSS_CLASS_PREFIX = '.';\nconst PSEUDO_PREFIX = ':';\nconst CLASS = 'class';\nconst SELECTOR_NO_MATCH = 'should_not_match';\nconst MATCHES = /:(?:matches|any|-(?:webkit|moz)-any)/;\nconst MATCHES_REPLACEMENT = '\\u{e000}';\n\nexport default new StyleTransformer()\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse, StyleNode} from './css-parse.js';\nimport {nativeShadow, nativeCssVariables, disableRuntime} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport StyleProperties from './style-properties.js';\nimport {ensureStylePlaceholder, getStylePlaceholder} from './style-placeholder.js';\nimport StyleInfo from './style-info.js';\nimport StyleCache from './style-cache.js';\nimport {flush as watcherFlush, getOwnerScope, getCurrentScope} from './document-watcher.js';\nimport templateMap from './template-map.js';\nimport * as ApplyShimUtils from './apply-shim-utils.js';\nimport {updateNativeProperties, detectMixin} from './common-utils.js';\nimport {CustomStyleInterfaceInterface} from './custom-style-interface.js'; // eslint-disable-line no-unused-vars\n\n/** @type {!Object<string, string>} */\nconst adoptedCssTextMap = {};\n\n/**\n * @const {StyleCache}\n */\nconst styleCache = new StyleCache();\n\nexport default class ScopingShim {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = /** @type {!HTMLElement} */(document.documentElement);\n    let ast = new StyleNode();\n    ast['rules'] = [];\n    this._documentOwnerStyleInfo = StyleInfo.set(this._documentOwner, new StyleInfo(ast));\n    this._elementsHaveApplied = false;\n    /** @type {?Object} */\n    this._applyShim = null;\n    /** @type {?CustomStyleInterfaceInterface} */\n    this._customStyleInterface = null;\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    return StyleUtil.gatherStyleText(template.content);\n  }\n  /**\n   * Prepare the styling and template for the given element type\n   *\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplate(template, elementName, typeExtension) {\n    this.prepareTemplateDom(template, elementName);\n    this.prepareTemplateStyles(template, elementName, typeExtension);\n  }\n  /**\n   * Prepare styling for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplateStyles(template, elementName, typeExtension) {\n    if (template._prepared || disableRuntime) {\n      return;\n    }\n    // style placeholders are only used when ShadyDOM is active\n    if (!nativeShadow) {\n      ensureStylePlaceholder(elementName);\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = StyleUtil.getCssBuild(template);\n    const optimalBuild = StyleUtil.isOptimalCssBuild(cssBuild);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n    };\n    let cssText = this._gatherStyles(template) + (adoptedCssTextMap[elementName] || '');\n    // check if the styling has mixin definitions or uses\n    this._ensure();\n    if (!optimalBuild) {\n      let hasMixins = !cssBuild && detectMixin(cssText);\n      let ast = parse(cssText);\n      // only run the applyshim transforms if there is a mixin involved\n      if (hasMixins && nativeCssVariables && this._applyShim) {\n        this._applyShim['transformRules'](ast, elementName);\n      }\n      template['_styleAst'] = ast;\n    }\n    let ownPropertyNames = [];\n    if (!nativeCssVariables) {\n      ownPropertyNames = StyleProperties.decorateStyles(template['_styleAst']);\n    }\n    if (!ownPropertyNames.length || nativeCssVariables) {\n      let root = nativeShadow ? template.content : null;\n      let placeholder = getStylePlaceholder(elementName);\n      let style = this._generateStaticStyle(info, template['_styleAst'], root, placeholder, cssBuild, optimalBuild ? cssText : '');\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n\n  /**\n   * @param {!Array<string>} cssTextArray\n   * @param {string} elementName\n   */\n  prepareAdoptedCssText(cssTextArray, elementName) {\n    adoptedCssTextMap[elementName] = cssTextArray.join(' ');\n  }\n  /**\n   * Prepare template for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    if (disableRuntime) {\n      return;\n    }\n    const cssBuild = StyleUtil.getCssBuild(template);\n    if (!nativeShadow && cssBuild !== 'shady' && !template._domPrepared) {\n      template._domPrepared = true;\n      StyleTransformer.domAddScope(template.content, elementName);\n    }\n  }\n  /**\n   * @param {!{is: string, extends: (string|undefined)}} info\n   * @param {!StyleNode} rules\n   * @param {DocumentFragment} shadowroot\n   * @param {Node} placeholder\n   * @param {string} cssBuild\n   * @param {string=} cssText\n   * @return {?HTMLStyleElement}\n   */\n  _generateStaticStyle(info, rules, shadowroot, placeholder, cssBuild, cssText) {\n    cssText = StyleTransformer.elementStyles(info, rules, null, cssBuild, cssText);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n    return null;\n  }\n  _prepareHost(host) {\n    const {is, typeExtension} = StyleUtil.getIsExtends(host);\n    const placeholder = getStylePlaceholder(is);\n    const template = templateMap[is];\n    if (!template) {\n      return;\n    }\n    const ast = template['_styleAst'];\n    const ownStylePropertyNames = template._ownPropertyNames;\n    const cssBuild = StyleUtil.getCssBuild(template);\n    const styleInfo = new StyleInfo(\n      ast,\n      placeholder,\n      ownStylePropertyNames,\n      is,\n      typeExtension,\n      cssBuild\n    );\n    StyleInfo.set(host, styleInfo);\n    return styleInfo;\n  }\n  _ensureApplyShim() {\n    if (this._applyShim) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.ApplyShim) {\n      this._applyShim = /** @type {!Object} */ (window.ShadyCSS.ApplyShim);\n      this._applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n    }\n  }\n  _ensureCustomStyleInterface() {\n    if (this._customStyleInterface) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.CustomStyleInterface) {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */(window.ShadyCSS.CustomStyleInterface);\n      /** @type {function(!HTMLStyleElement)} */\n      this._customStyleInterface['transformCallback'] = (style) => {this.transformCustomStyleForDocument(style)};\n      this._customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this._customStyleInterface['enqueued'] || this._elementsHaveApplied) {\n            this.flushCustomStyles();\n          }\n        })\n      };\n    }\n  }\n  _ensure() {\n    this._ensureApplyShim();\n    this._ensureCustomStyleInterface();\n  }\n  /**\n   * Flush and apply custom styles to document\n   */\n  flushCustomStyles() {\n    if (disableRuntime) {\n      return;\n    }\n    this._ensure();\n    if (!this._customStyleInterface) {\n      return;\n    }\n    let customStyles = this._customStyleInterface['processStyles']();\n    // early return if custom-styles don't need validation\n    if (!this._customStyleInterface['enqueued']) {\n      return;\n    }\n    // bail if custom styles are built optimally\n    if (StyleUtil.isOptimalCssBuild(this._documentOwnerStyleInfo.cssBuild)) {\n      return;\n    }\n    if (!nativeCssVariables) {\n      this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n      this._applyCustomStyles(customStyles);\n      if (this._elementsHaveApplied) {\n        // if custom elements have upgraded and there are no native css variables, we must recalculate the whole tree\n        this.styleDocument();\n      }\n    } else if (!this._documentOwnerStyleInfo.cssBuild) {\n      this._revalidateCustomStyleApplyShim(customStyles);\n    }\n    this._customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * Apply styles for the given element\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} overrideProps\n   */\n  styleElement(host, overrideProps) {\n    if (disableRuntime) {\n      if (overrideProps) {\n        if (!StyleInfo.get(host)) {\n          StyleInfo.set(host, new StyleInfo(null));\n        }\n        const styleInfo = /** @type {!StyleInfo} */(StyleInfo.get(host));\n        this._mixOverrideStyleProps(styleInfo, overrideProps);\n        this.styleElementNativeVariables(host, styleInfo);\n      }\n      return;\n    }\n    const styleInfo = StyleInfo.get(host) || this._prepareHost(host);\n    // if there is no style info at this point, bail\n    if (!styleInfo) {\n      return;\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (overrideProps) {\n      this._mixOverrideStyleProps(styleInfo, overrideProps);\n    }\n    if (!nativeCssVariables) {\n      this.styleElementShimVariables(host, styleInfo);\n    } else {\n      this.styleElementNativeVariables(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!StyleInfo} styleInfo\n   * @param {Object} overrideProps\n   */\n  _mixOverrideStyleProps(styleInfo, overrideProps) {\n    styleInfo.overrideStyleProperties =\n      styleInfo.overrideStyleProperties || {};\n    Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementShimVariables(host, styleInfo) {\n    this.flush();\n    this._updateProperties(host, styleInfo);\n    if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n      this._applyStyleProperties(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementNativeVariables(host, styleInfo) {\n    const { is } = StyleUtil.getIsExtends(host);\n    if (styleInfo.overrideStyleProperties) {\n      updateNativeProperties(host, styleInfo.overrideStyleProperties);\n    }\n    const template = templateMap[is];\n    // bail early if there is no shadowroot for this element\n    if (!template && !this._isRootOwner(host)) {\n      return;\n    }\n    // bail early if the template was built with polymer-css-build\n    if (template && StyleUtil.elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && template._style && !ApplyShimUtils.templateIsValid(template)) {\n      // update template\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRules'](template['_styleAst'], is);\n        template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update instance if native shadowdom\n      if (nativeShadow) {\n        let root = host.shadowRoot;\n        if (root) {\n          let style = root.querySelector('style');\n          if (style) {\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n      }\n      styleInfo.styleRules = template['_styleAst'];\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = StyleUtil.wrap(node).getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host) || this._prepareHost(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = StyleUtil.getIsExtends(host).is;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    // style owner has not updated properties yet\n    // go up the chain and force property update,\n    // except if the owner is the document\n    if (owner !== this._documentOwner && !ownerProperties) {\n      this._updateProperties(owner, ownerStyleInfo);\n      ownerProperties = ownerStyleInfo.styleProperties;\n    }\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules, styleInfo.cssBuild);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  /**\n   * Update styles of the whole document\n   *\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.styleSubtree(this._documentOwner, properties);\n  }\n  /**\n   * Update styles of a subtree\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} properties\n   */\n  styleSubtree(host, properties) {\n    const wrappedHost = StyleUtil.wrap(host);\n    let root = wrappedHost.shadowRoot;\n    if (root || this._isRootOwner(host)) {\n      this.styleElement(host, properties);\n    }\n    // process the shadowdom children of `host`\n    let shadowChildren =\n        root && (/** @type {!ParentNode} */ (root).children || root.childNodes);\n    if (shadowChildren) {\n      for (let i = 0; i < shadowChildren.length; i++) {\n        let c = /** @type {!HTMLElement} */(shadowChildren[i]);\n        this.styleSubtree(c);\n      }\n    } else {\n      // process the lightdom children of `host`\n      let children = wrappedHost.children || wrappedHost.childNodes;\n      if (children) {\n        for (let i = 0; i < children.length; i++) {\n          let c = /** @type {!HTMLElement} */(children[i]);\n          this.styleSubtree(c);\n        }\n      }\n    }\n  }\n  /* Custom Style operations */\n  _revalidateCustomStyleApplyShim(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        this._revalidateApplyShim(s);\n      }\n    }\n  }\n  _applyCustomStyles(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        StyleProperties.applyCustomStyle(s, this._documentOwnerStyleInfo.styleProperties);\n      }\n    }\n  }\n  transformCustomStyleForDocument(style) {\n    const cssBuild = StyleUtil.getCssBuild(style);\n    if (cssBuild !== this._documentOwnerStyleInfo.cssBuild) {\n      this._documentOwnerStyleInfo.cssBuild = cssBuild;\n    }\n    if (StyleUtil.isOptimalCssBuild(cssBuild)) {\n      return;\n    }\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (nativeCssVariables && cssBuild === '') {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRule'](rule);\n      }\n    });\n    if (nativeCssVariables) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules['rules'].push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (nativeCssVariables && this._applyShim) {\n      let ast = StyleUtil.rulesForStyle(style);\n      this._ensure();\n      this._applyShim['transformRules'](ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!nativeCssVariables) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value ? value.trim() : '';\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = StyleUtil.wrap(element).getRootNode();\n    let classes;\n    if (classString) {\n      let definitelyString = typeof classString === 'string' ? classString : String(classString);\n      classes = definitelyString.split(/\\s/);\n    } else {\n      classes = [];\n    }\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!nativeCssVariables) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  scopeNode(node, scope) {\n    StyleTransformer.element(node, scope);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  unscopeNode(node, scope) {\n    StyleTransformer.element(node, scope, true);\n  }\n  /**\n   * @param {!Node} node\n   * @return {string}\n   */\n  scopeForNode(node) {\n    return getOwnerScope(node);\n  }\n  /**\n   * @param {!Element} node\n   * @return {string}\n   */\n  currentScopeForNode(node) {\n    return getCurrentScope(node);\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nScopingShim.prototype['flush'] = ScopingShim.prototype.flush;\nScopingShim.prototype['prepareTemplate'] = ScopingShim.prototype.prepareTemplate;\nScopingShim.prototype['styleElement'] = ScopingShim.prototype.styleElement;\nScopingShim.prototype['styleDocument'] = ScopingShim.prototype.styleDocument;\nScopingShim.prototype['styleSubtree'] = ScopingShim.prototype.styleSubtree;\nScopingShim.prototype['getComputedStyleValue'] = ScopingShim.prototype.getComputedStyleValue;\nScopingShim.prototype['setElementClass'] = ScopingShim.prototype.setElementClass;\nScopingShim.prototype['_styleInfoForNode'] = ScopingShim.prototype._styleInfoForNode;\nScopingShim.prototype['transformCustomStyleForDocument'] = ScopingShim.prototype.transformCustomStyleForDocument;\nScopingShim.prototype['getStyleAst'] = ScopingShim.prototype.getStyleAst;\nScopingShim.prototype['styleAstToString'] = ScopingShim.prototype.styleAstToString;\nScopingShim.prototype['flushCustomStyles'] = ScopingShim.prototype.flushCustomStyles;\nScopingShim.prototype['scopeNode'] = ScopingShim.prototype.scopeNode;\nScopingShim.prototype['unscopeNode'] = ScopingShim.prototype.unscopeNode;\nScopingShim.prototype['scopeForNode'] = ScopingShim.prototype.scopeForNode;\nScopingShim.prototype['currentScopeForNode'] = ScopingShim.prototype.currentScopeForNode;\nScopingShim.prototype['prepareAdoptedCssText'] = ScopingShim.prototype.prepareAdoptedCssText;\n/* eslint-enable no-self-assign */\nObject.defineProperties(ScopingShim.prototype, {\n  'nativeShadow': {\n    get() {\n      return nativeShadow;\n    }\n  },\n  'nativeCss': {\n    get() {\n      return nativeCssVariables;\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport {getIsExtends, elementHasBuiltCss, wrap} from './style-util.js';\n\nexport let flush = function() {};\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nfunction getClasses(element) {\n  if (element.classList && element.classList.value) {\n    return element.classList.value;\n  } else {\n    // NOTE: className is patched to remove scoping classes in ShadyDOM\n    // use getAttribute('class') instead, which is unpatched\n    return element.getAttribute('class') || '';\n  }\n}\n\nconst scopeRegExp = new RegExp(`${StyleTransformer.SCOPE_NAME}\\\\s*([^\\\\s]*)`);\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nexport function getCurrentScope(element) {\n  const match = getClasses(element).match(scopeRegExp);\n  if (match) {\n    return match[1];\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {!Node} node\n */\nexport function getOwnerScope(node) {\n  const ownerRoot = wrap(node).getRootNode();\n  if (ownerRoot === node || ownerRoot === node.ownerDocument) {\n    return '';\n  }\n  const host = /** @type {!ShadowRoot} */(ownerRoot).host;\n  if (!host) {\n    // this may actually be a document fragment\n    return '';\n  }\n  return getIsExtends(host).is;\n}\n\n/**\n * @param {!Element} element\n */\nexport function ensureCorrectScope(element) {\n  const currentScope = getCurrentScope(element);\n  const ownerRoot = wrap(element).getRootNode();\n  if (ownerRoot === element) {\n    return;\n  }\n  if (currentScope && ownerRoot === element.ownerDocument) {\n    // node was scoped, but now is in document\n    StyleTransformer.domRemoveScope(element, currentScope);\n  } else if (ownerRoot instanceof ShadowRoot) {\n    const ownerScope = getOwnerScope(element);\n    if (ownerScope !== currentScope) {\n      // node was scoped, but not by its current owner\n      StyleTransformer.domReplaceScope(element, currentScope, ownerScope);\n    }\n  }\n}\n\n/**\n * @param {!HTMLElement|!HTMLDocument} element\n */\nexport function ensureCorrectSubtreeScoping(element) {\n  // find unscoped subtree nodes\n  const unscopedNodes = window['ShadyDOM']['nativeMethods']['querySelectorAll'].call(\n    element, `:not(.${StyleTransformer.SCOPE_NAME})`);\n\n  for (let j = 0; j < unscopedNodes.length; j++) {\n    // it's possible, during large batch inserts, that nodes that aren't\n    // scoped within the current scope were added.\n    // To make sure that any unscoped nodes that were inserted in the current batch are correctly styled,\n    // query all unscoped nodes and force their style-scope to be applied.\n    // This could happen if a sub-element appended an unscoped node in its shadowroot and this function\n    // runs on a parent element of the host of that unscoped node:\n    // parent-element -> element -> unscoped node\n    // Here unscoped node should have the style-scope element, not parent-element.\n    const unscopedNode = unscopedNodes[j];\n    const scopeForPreviouslyUnscopedNode = getOwnerScope(unscopedNode);\n    if (scopeForPreviouslyUnscopedNode) {\n      StyleTransformer.element(unscopedNode, scopeForPreviouslyUnscopedNode);\n    }\n  }\n}\n\n/**\n * @param {HTMLElement} el\n * @return {boolean}\n */\nfunction isElementWithBuiltCss(el) {\n  if (el.localName === 'style' || el.localName === 'template') {\n    return elementHasBuiltCss(el);\n  }\n  return false;\n}\n\n/**\n * @param {Array<MutationRecord|null>|null} mxns\n */\nfunction handler(mxns) {\n  for (let x=0; x < mxns.length; x++) {\n    let mxn = mxns[x];\n    if (mxn.target === document.documentElement ||\n      mxn.target === document.head) {\n      continue;\n    }\n    for (let i=0; i < mxn.addedNodes.length; i++) {\n      let n = mxn.addedNodes[i];\n      if (n.nodeType !== Node.ELEMENT_NODE) {\n        continue;\n      }\n      n = /** @type {HTMLElement} */(n); // eslint-disable-line no-self-assign\n      let root = n.getRootNode();\n      let currentScope = getCurrentScope(n);\n      // node was scoped, but now is in document\n      // If this element has built css, we must not remove scoping as this node\n      // will be used as a template or style without re - applying scoping as an optimization\n      if (currentScope && root === n.ownerDocument && !isElementWithBuiltCss(n)) {\n        StyleTransformer.domRemoveScope(n, currentScope);\n      } else if (root instanceof ShadowRoot) {\n        const newScope = getOwnerScope(n);\n        // rescope current node and subtree if necessary\n        if (newScope !== currentScope) {\n          StyleTransformer.domReplaceScope(n, currentScope, newScope);\n        }\n        // make sure all the subtree elements are scoped correctly\n        ensureCorrectSubtreeScoping(n);\n      }\n    }\n  }\n}\n\n// if native Shadow DOM is being used, or ShadyDOM handles dynamic scoiping, do not activate the MutationObserver\nif (!nativeShadow && !(window['ShadyDOM'] && window['ShadyDOM']['handlesDynamicScoping'])) {\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window['customElements'] &&\n    !window['customElements']['polyfillWrapFlushCallback']);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window['HTMLImports']) {\n      window['HTMLImports']['whenReady'](delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport * as RX from './common-regex.js';\nimport StyleInfo from './style-info.js';\n\n// TODO: dedupe with shady\n/**\n * @param {string} selector\n * @return {boolean}\n * @this {Element}\n */\nconst matchesSelector = function(selector) {\n  const method = this.matches || this.matchesSelector ||\n    this.mozMatchesSelector || this.msMatchesSelector ||\n    this.oMatchesSelector || this.webkitMatchesSelector;\n  return method && method.call(this, selector);\n};\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n/**\n * decorates styles with rule info and returns an array of used style property names\n *\n * @param {StyleNode} rules\n * @return {Array<string>}\n */\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule['rules'] = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = RX.VAR_ASSIGN;\n      let cssText = rule['parsedCssText'];\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule['parsedCssText']);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(RX.BRACKETED, '')\n      .replace(RX.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = RX.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        RX.MIXIN_MATCH.lastIndex = 0;\n        m = RX.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule['cssText'] = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule['cssText'];\n    let output = rule['cssText'];\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = RX.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule['cssText'] = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  /**\n   * @param {StyleNode} rules\n   * @param {Element} element\n   */\n  propertyDataFromStyles(rules, element) {\n    let props = {};\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        this.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule['parsedSelector'];\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          this.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  /**\n   * @param {Element} scope\n   * @param {StyleNode} rule\n   * @param {string} cssBuild\n   * @param {function(Object)} callback\n   */\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let {is, typeExtension} = StyleUtil.getIsExtends(scope);\n    let hostScope = is ?\n      StyleTransformer._calcHostScope(is, typeExtension) :\n      'html';\n    let parsedSelector = rule['parsedSelector'];\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host because `:host` does not work with `matches`\n      if (!rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n/**\n * @param {Element} scope\n * @param {StyleNode} rules\n * @param {string} cssBuild\n * @return {Object}\n */\n  hostAndRootPropertiesForScope(scope, rules, cssBuild) {\n    let hostProps = {}, rootProps = {};\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      this.whenHostOrRootRule(scope, rule, cssBuild, (info) => {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            this.collectProperties(rule, hostProps);\n          } else {\n            this.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object} properties\n   * @param {string} scopeSelector\n   */\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let {is, typeExtension} = StyleUtil.getIsExtends(element);\n    let hostSelector = StyleTransformer\n      ._calcHostScope(is, typeExtension);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(RX.HOST_PREFIX + rxHostSelector +\n      RX.HOST_SUFFIX);\n    let {styleRules: rules, cssBuild} = StyleInfo.get(element);\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule['cssText']) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    }, cssBuild);\n  }\n\n  /**\n   * @param {Element} element\n   * @param {StyleNode} rules\n   * @param {string} scopeSelector\n   * @return {Object}\n   */\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule['keyframesName']] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  /**\n   * @param {StyleNode} keyframesRule\n   * @return {function(string):string}\n   */\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n/**\n * Transforms `@keyframes` names to be unique for the current host.\n * Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n *\n * @param {StyleNode} rule\n * @param {string} scopeId\n */\n  _scopeKeyframes(rule, scopeId) {\n    // Animation names are of the form [\\w-], so ensure that the name regex does not partially apply\n    // to similarly named keyframe names by checking for a word boundary at the beginning and\n    // a non-word boundary or `-` at the end.\n    rule.keyframesNameRx = new RegExp(`\\\\b${rule['keyframesName']}(?!\\\\B|-)`, 'g');\n    rule.transformedKeyframesName = rule['keyframesName'] + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    rule['selector'] = rule.transformedSelector.replace(\n        rule['keyframesName'], rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  /**\n   * @param {StyleNode} rule\n   * @param {RegExp} hostRx\n   * @param {string} hostSelector\n   * @param {string} scopeId\n   */\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = StyleUtil.splitSelectorList(selector);\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule['selector'] = parts.join(',');\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} selector\n   * @param {string} old\n   */\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @param {Object} properties\n   * @param {string} selector\n   * @param {HTMLStyleElement} style\n   * @return {HTMLStyleElement}\n   */\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s['_useCount']--;\n      if (s['_useCount'] <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        if (IS_IE && cssText.indexOf('@media') > -1) {\n            // @media rules may be stale in IE 10 and 11\n            // refresh the text content of the style to revalidate them.\n          style.textContent = cssText;\n        }\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style['_useCount'] = style['_useCount'] || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style['_useCount']++;\n      }\n      styleInfo.customStyle = style;\n    }\n    return style;\n  }\n\n  /**\n   * @param {Element} style\n   * @param {Object} properties\n   */\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(/** @type {HTMLStyleElement} */(style));\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      let css = rule['cssText'] = rule['parsedCssText'];\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(/** @type {string} */(css));\n        // replace with reified properties, scenario is same as mixin\n        rule['cssText'] = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\n/**\n * @param {number} n\n * @param {Array<number>} bits\n */\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32, 10);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/** @const {string} */\nconst infoKey = '__styleInfo';\n\nexport default class StyleInfo {\n  /**\n   * @param {Element} node\n   * @return {StyleInfo}\n   */\n  static get(node) {\n    if (node) {\n      return node[infoKey];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * @param {!Element} node\n   * @param {StyleInfo} styleInfo\n   * @return {StyleInfo}\n   */\n  static set(node, styleInfo) {\n    node[infoKey] = styleInfo;\n    return styleInfo;\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {Node=} placeholder\n   * @param {Array<string>=} ownStylePropertyNames\n   * @param {string=} elementName\n   * @param {string=} typeExtension\n   * @param {string=} cssBuild\n   */\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    /** @type {StyleNode} */\n    this.styleRules = ast || null;\n    /** @type {Node} */\n    this.placeholder = placeholder || null;\n    /** @type {!Array<string>} */\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    /** @type {Object} */\n    this.overrideStyleProperties = null;\n    /** @type {string} */\n    this.elementName = elementName || '';\n    /** @type {string} */\n    this.cssBuild = cssBuild || '';\n    /** @type {string} */\n    this.typeExtension = typeExtension || '';\n    /** @type {Object<string, string>} */\n    this.styleProperties = null;\n    /** @type {?string} */\n    this.scopeSelector = null;\n    /** @type {HTMLStyleElement} */\n    this.customStyle = null;\n  }\n  _getStyleRules() {\n    return this.styleRules;\n  }\n}\n\n/* eslint-disable-next-line no-self-assign */\nStyleInfo.prototype['_getStyleRules'] = StyleInfo.prototype._getStyleRules;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util.js';\nimport {nativeShadow, disableRuntime} from './style-settings.js';\n\n/** @type {!Object<string, !Node>} */\nconst placeholderMap = {};\n\n/**\n * @param {string} elementName\n * @return {Node}\n */\nexport function getStylePlaceholder(elementName) {\n  return placeholderMap[elementName] || null;\n}\n\n/**\n * @param {string} elementName\n */\nexport function ensureStylePlaceholder(elementName) {\n  if (!placeholderMap[elementName]) {\n    placeholderMap[elementName] = applyStylePlaceHolder(elementName);\n  }\n}\n\n/**\n * @const {CustomElementRegistry}\n */\nconst ce = window['customElements'];\nif (ce && !nativeShadow && !disableRuntime) {\n  /**\n   * @const {function(this:CustomElementRegistry, string,function(new:HTMLElement),{extends: string}=)}\n   */\n  const origDefine = ce['define'];\n  /**\n   * @param {string} name\n   * @param {function(new:HTMLElement)} clazz\n   * @param {{extends: string}=} options\n   */\n  const wrappedDefine = (name, clazz, options) => {\n    ensureStylePlaceholder(name);\n    origDefine.call(/** @type {!CustomElementRegistry} */(ce), name, clazz, options);\n  };\n  ce['define'] = wrappedDefine;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    /** @type {number} */\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ScopingShim from '../src/scoping-shim.js';\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ScopingShim} */\nconst scopingShim = new ScopingShim();\n\nlet ApplyShim, CustomStyleInterface;\n\nif (window['ShadyCSS']) {\n  ApplyShim = window['ShadyCSS']['ApplyShim'];\n  CustomStyleInterface = window['ShadyCSS']['CustomStyleInterface'];\n}\n\nwindow.ShadyCSS = {\n  ScopingShim: scopingShim,\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplate(template, elementName, elementExtends)\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    scopingShim.prepareTemplateDom(template, elementName);\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplateStyles(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplateStyles(template, elementName, elementExtends)\n  },\n  /**\n   * @param {!HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleSubtree(element, properties);\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   */\n  styleElement(element) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleElement(element);\n  },\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleDocument(properties);\n  },\n\n  flushCustomStyles() {\n    scopingShim.flushCustomStyles();\n  },\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    return scopingShim.getComputedStyleValue(element, property);\n  },\n\n  nativeCss: nativeCssVariables,\n\n  nativeShadow: nativeShadow,\n\n  cssBuild: cssBuild,\n\n  disableRuntime: disableRuntime,\n};\n\nif (ApplyShim) {\n  window.ShadyCSS.ApplyShim = ApplyShim;\n}\n\nif (CustomStyleInterface) {\n  window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n}"]}